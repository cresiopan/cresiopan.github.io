#+TITLE: Capa de Transporte, UDP y Entrega confiable

La capa de transporte tiene el rol de proveer servicios-de-comunicacion
directamente a la aplicacion ejecutandose en otro host.

extiende el servicio-de-entrega entre dos *end-systems* de la capa de red, a un
servicio-de-entrega entre dos *procesos* de capa de aplicacion ejecutandose en
los end-systems.

* Introduccion y Servicios de Capa de Transporte

  un protocolo de capa de transporte provee ~comunicacion logica~ entre procesos
  ejecutandose en diferentes hosts. Desde el punto de vista del proceso, es como
  si los hosts estuviesen conectados directamente, sin tener que preocuparse por
  los detalles involucrados para enviar los mensajes.

  imagen 3.1

  los protocolos de capa de transporte estan implementados en los end-systems y no
  en los conmutadores de paquetes. De el lado que envia, la capa de transporte
  convierte mensajes de capa-de-aplicacion en paquetes de capa-de-transporte
  llamados ~segmentos~.

** DONE Relacion entre las capas de transporte y capa de red

   protocolos de capa de red proveen una comunicaicon logica entre *hosts*, los
   protocolos de capa de transporte proveen una comunicacion logica entre
   *procesos*

** DONE Panorama general de la capa de transporte en la internet

   La internet tiene dos protocolos de capa de transporte distintos disponibles
   para la capa de aplicacion:
   - ~UDP (User Datagram Protocol)~ :: que provee un servicio sin conexion y no
     confiable
   - ~TCP (Transmission Control Protocol)~ :: que provee un servicio orientado a
     conexion y confiable.

   La responsabilidad fundamental de UDP y TCP es extender el servicio de IP entre
   dos end-systems a un servicio entre dos procesos. Esto se llama ~multiplexacion~
   y ~demultiplexacion~.

   UDP y TCP tambien proveen verificacion de integridad al incluir campos en el
   encabezado para la deteccion de errores.

   UDP solamente provee:
   - entrega de datos proceso-a-proceso
   - verificacion de errores

   no garantiza que los mensajes enviado lleguen a su destino.


   TCP ofrece otros servicios adicionales:
   - ~Transferencia de datos confiable~ :: Al utilizar control de flujo, numeros de
     secuencia, acuse de recibo, y timer, se garantiza que los datos enviados
     lleguen a su (proceso) destino, sin errores y en orden.
   - ~Control de Congestion~ :: evita que congestionar enlaces y routers con
     demasiado trafico. Se logra regulando a la velocidad en que se transmiten
     paquetes.

* Multiplexacion y Demultiplexacion

  (extender servicio de delivery de host-a-host (de la capa inferior (red - IP)) a
  proceso-a-proceso)

  imagen 3.2

  Recordemos que las aplicaciones se comunican a traves de la red mediante
  sockets.

  Un host que recibe segmentos de capa de transporte los redirecciona al socket
  apropiado, utilizando campos en el encabezado del segmento. el proceso de
  entregar el segmento de capa de transporte al socket correcto se conoce como
  demultiplexacion.

  El proceso de recolectar datos de distintos sockets en el origen, encapsulando
  cada uno, creando segmentos y pasarlos a la capa de red, se conoce como
  multiplexacion.

  La multiplexacion de capa de transporte requiere:
  1. que los sockets tengan identificadores unicos
  2. que cada segmento tenga campos especiales para indicar al socket al que deben
     ser entregados. estos campos son ~source port number field~ y ~destination
     port number field~.

  imagen 3.3

  cada numero de puerto es un numero de 16-bits, entre 0 y 65535.

  Los numeros de puertos de 0 a 1023 son well-known y estan reservados para
  aplicaciones de capa de aplicacion well-known (http:80, ftp:21).

  RFC 1700

** Multiplexacion y Demultiplexacion Sin Conexion

   En general, el lado cliente de la aplicacion permite que la capa de transporte
   asigne automaticamente el numero de puerto, mientras que el lado servidor de la
   aplicacion asigna un numero de puerto especifico.

   With port numbers assigned to UDP sockets, we can now precisely describe UDP
   multiplexing/demultiplexing.

   Supongamos que un proceso en el host A, con puerto UDP 19157, quiere enviar
   datos a un proceso con puerto UDP 46428 en el host B. La capa de transporte en
   el host A crea un segmento de capa de transporte que incluye datos de la
   aplicacion, source port number (19157), destination port number (46428), y otros
   dos valores. El segmento luego se pasa a la capa de red.

   La capa de red encapsula el segmento en un datagrama IP y hace el mejor intento
   de enviar el datagrama a su destino.

   Si el segmento llega al host B, la capa de transporte examina el numero de
   puerto destino (46428) y entrega el segmento al socket identificado en el
   numero 46428.

   Un socket UDP es identificable por una tupla formada por la IP y puerto de
   destino.  Como consecuencia, Si dos segmentos UDP tienen diferentes IP de origen
   y/o puerto de origen, pero tienen la misma IP y puerto de destino, entonces
   ambos segmentos son dirigidos al mismo proceso mediante el mismo socket.

   El puerto de origen sirve para poder devolver segmentos al mismo proceso

   imagen 3.4

** Multiplexacion y Demultiplexacion Orientado a Conexion

   Un socket TCP es identificable por una cuatro-upla
   #+begin_quote
   (IP origen, puerto origen, IP destino, puerto destino)
   #+end_quote

   Cuando se recibe un segmento TCP, el host utiliza estos cuatro valores para
   demultiplexar el segmento al socket apropiado.

   Ejemplo:
   - El servidor TCP tiene un socket aceptador, que espera por conexiones de
     clientes TCP en el puerto 12000.
   - El cliente crea un socket y envia un pedido de conexion al
     puerto 12000. Tambien envia el puerto de origen del segmento elegido por el
     cliente.
   - Cuando el server recibe el segmento de pedido de conexion, el OS ubica al
     proceso que espera por la conexion en el puerto 12000.
   - Una vez que se acepta la conexion, se anotan los cuatro campos mencionados y
     se crea un socket nuevo asociado a estos campos. Los siguientes segmentos con
     los mismos cuatro valores son demultiplexados a este socket.

     imagen 3.5

* Transporte sin conexion: UDP

  UDP, definido en [RFC 768], hace lo minimo posible que un protocolo de capa de
  transporte puede hacer.

  Ademas de multiplexar y demultiplexar segmentos y una simple verificacion de
  errores, no agrega nada a IP.

  A UDP se lo denomina como ~sin conexion~ porque no realiza ~handshaking~ entre
  los hosts antes de enviar y recibir segmentos.

  DNS es un ejemplo de un protocolo de capa de aplicacion que usualmente utiliza
  UDP.

  Algunas aplicaciones utilizan UDP porque:
  - Mayor control de la aplicacion sobre los datos enviados y cuando :: En UDP,
    apenas el proceso envia los datos por el socket UDP, el segmento se pasa
    directo a la capa de red. TCP por el otro lado, al tener el mecanismo de
    control de congestion, el trafico es regulado si el enlace o routers en el
    camino sufren de congestion. TCP tambien reenvia segmentos hasta que se
    reciba un acuse de recibo, lo que es un inconveniente para aplicaciones de
    tiempo real ya que requieren una velocidad de transmision minima y pueden
    tolerar perdida de datos.
  - Sin establecimiento de conexion (handshake) :: UDP simplemente envia los datos
    hacia la siguiente capa, por lo que no tiene delay para establecer una
    conexion.
  - Sin estado de conexion :: TCP mantiene el estado de conexion en los
    end-systems. Esto incluye buffers de envio y recepcion, parametros de control
    de congestion, numeros de secuencia y acuse de recibo. UDP, no mantiene estado
    de la conexion ni lleva registro de estos parametros (utilizados para
    garantizar una comunicacion confiable).
  - Encabezado pqueño :: El encabezado de TCP tiene 20 bytes mientras que el de
    UDP es solamente de 8 bytes.

    imagen 3.6

** UDP Segment Structure

   imagen 3.7

   La estructura del segmento UDP esta definida en RFC 768.

   Los datos de la aplicacion se encuentran en el campo de datos del segmento.

   El encabezado UDP solo tienen cuatro campos, cada uno de dos bytes.

   El campo length especifica el numero de bytes en el segmento UDP (encapsulado +
   datos). Es necesario ya que el tamaño del campo de datos puede variar entre
   segmentos UDP.

   El checksum es utilizado por el host receptor para verificar si el segmento
   tiene errores.

** UDP Checksum

   Del lado que envia, se realiza el complemento a 1 de la suma de todos los words
   de 16 bits en el segmento.

* Principios de Transferencia de Datos Confiable (TDC)

  Con un canal de comunicacion confiable, los bits transferidos no se corrompen
  ni se pierden, y son entregados en el orden en que fueron enviados.

  imagen 3.8

  rdt : reliable data transfer

  En esta seccion se considera el caso de la transferencia de datos
  unidireccional.

  Ademas del intercambio de paquetes de datos, ambos extremos de la
  comunicacion confiable tambien deben intercambiar paquetes de control. El
  envio de paquetes se realiza mediante la funcion udt_send() (donde udt es
  unreliable data transfer)

** Armando un protocolo de TDC
*** RDT 1.0: TDC sobre un canal confiable
    We first consider the simplest case, in which the underlying channel is
    completely reliable.

    dos ~maquinas de estado finitas (FSM)~ definen las operaciones de un
    transmisor y emisor rdt1.0.

    imagen 3.9

    Cada FSM tiene un estado

    el lado transmisor del rdt:
    1. acepta datos de la capa superior via el evento ~rdt_send(data)~,
    2. crea un paquete con los datos con la accion ~make_pkt(data)~) y
    3. envia el paquete al canal.

    el lado receptor:
    1. recibe un paquete de la capa inferior via el evento ~rdt_rcv(packet)~,
    2. quita los datos del paquete con la accion ~extract (packet, data)~ ) y
    3. pasa los datos a la capa superior ~deliver_data(data)~.

    en este protocolo simple, no hay distincion etnre una unidad de datos y un
    paquete. tambien, todo el flujo de paquetes es del emisor al receptor, no
    hay necesidad de que el receptor envie feedback. tambien se asume que el el
    emisor es capaz de recibir datos a la misma velocidad en que el transmisor
    los envia (por lo que no es necesario que el receptor indique al transmisor
    a que reduzca la velocidad).

*** TODO RDT 2.0: TDC sobre un canal con errores

    Un modelo mas realista es donde ocurre corrupcion de bits en el canal de
    comunicacion.

**** TODO Protocolos ARQ (Automatic Repeat reQuest)
     Reliable data transfer protocols based on retransmissions depending on the
     control messages sent.

     The types of control messages are
     - positive acknowledgments
     - negative acknowledgments

     These control messages allow the *reciever* to let the sender know what has
     been received correctly, and what has been received in error and thus
     requires repeating.

     three additional protocol capabilities are required in ARQ protocols to
     handle the presence of bit errors:
     - Error detection :: a mechanism that allows the receiver to detect when
       bit errors have occurred. Recall from the previous section that UDP uses
       the Internet checksum field for exactly this purpose. For now, we need
       only know that these techniques require that extra bits (beyond the bits
       of original data to be transferred) be sent from the sender to the
       receiver; these bits will be gathered into the packet checksum field of
       the rdt2.0 data packet.
     - Receiver feedback :: the only way for the sender to know whether or not a
       packet was received correctly, is for the receiver to provide explicit
       feedback to the sender. The positive (~ACK~) and negative (~NAK~)
       acknowledgment replies in the message-dictation scenario are examples of
       such feedback. Our rdt2.0 protocol will similarly send ACK and NAK
       packets back from the receiver to the sender. In principle, these packets
       need only be one bit long; for example, a 0 value could indicate a NAK
       and a value of 1 could indicate an ACK.
     - Retransmission :: A packet that is received in error at the receiver will
       be retransmitted by the sender.

     imagen 3.10

     The send side of rdt2.0 has two states.

     - In the leftmost state, the send-side protocol is waiting for data to be
       passed down from the upper layer. When the ~rdt_send(data)~ event occurs,
       the sender will create a packet ( ~sndpkt~ ) containing the data to be
       sent, along with a packet checksum and then send the packet via the
       ~udt_send(sndpkt)~ operation.
     - In the rightmost state, the sender protocol is waiting for an ACK or a
       NAK packet from the receiver.
       - If an ACK packet is received the sender knows that the most recently
         transmitted packet has been received correctly and thus the protocol
         returns to the state of waiting for data from the upper layer.
       - If a NAK is received, the protocol retransmits the last packet and
         waits for an ACK or NAK to be returned by the receiver in response to
         the retransmitted data packet.

     when the sender is in the wait-for-ACK-or-NAK state, it cannot get more
     data from the upper layer; that is, the ~rdt_send()~ event can not occur;
     that will happen only after the sender receives an ACK and leaves this
     state. Thus, the sender will not send a new piece of data until it is sure
     that the receiver has correctly received the current packet. Because of
     this behavior, protocols such as rdt2.0 are known as ~stop-and-wait~
     protocols.

     The receiver-side FSM for rdt2.0 still has a single state. On packet
     arrival, the receiver replies with either an ACK or a NAK, depending on
     whether or not the received packet is corrupted.

     we haven’t accounted for the possibility that the ACK or NAK packet could
     be corrupted. Minimally, we will need to add checksum bits to ACK/NAK
     packets in order to detect such errors. The more difficult question is how
     the protocol should recover from errors in ACK or NAK packets. The
     difficulty here is that if an ACK or NAK is corrupted, the sender has no
     way of knowing whether or not the receiver has correctly received the last
     piece of transmitted data.

     Consider three possibilities for handling corrupted ACKs or NAKs:
     - For the first possibility, consider what a human might do in the
       message-dictation scenario. If the speaker didn’t understand the “OK” or
       “Please repeat that” reply from the receiver, the speaker would probably
       ask, “What did you say?” (thus introducing a new type of
       sender-to-receiver packet to our protocol).  The receiver would then
       repeat the reply. But what if the speaker’s “What did you say?” is
       corrupted? The receiver, having no idea whether the garbled sentence was
       part of the dictation or a request to repeat the last reply, would
       probably then respond with “What did you say?” And then, of course, that
       response might be garbled. Clearly, we’re heading down a difficult path.
     - A second alternative is to add enough checksum bits to allow the sender
       not only to detect, but also to recover from, bit errors. This solves the
       immediate problem for a channel that can corrupt packets but not lose
       them.
     - A third approach is for the sender simply to resend the current data
       packet when it receives a garbled ACK or NAK packet. This approach,
       however, introduces duplicate packets into the sender-to-receiver
       channel. The fundamental difficulty with duplicate packets is that the
       receiver doesn’t know whether the ACK or NAK it last sent was received
       correctly at the sender.  Thus, it cannot know a priori whether an
       arriving packet contains new data or is a retransmission!

     A simple solution is to add a new field to the data packet and have the
     sender number its data packets by putting a ~sequence number~ into this
     field. The receiver then need only check this sequence number to determine
     whether or not the received packet is a retransmission. For this simple
     case of a stop-and-wait protocol, a 1-bit sequence number will suffice,
     since it will allow the receiver to know whether the sender is resending
     the previously transmitted packet (the sequence number of the received
     packet has the same sequence number as the most recently received packet)
     or a new packet.Since we are currently assuming a channel that does not
     lose packets, ACK and NAK packets do not themselves need to indicate the
     sequence number of the packet they are acknowledging. The sender knows that
     a received ACK or NAK packet (whether garbled or not) was generated in
     response to its most recently transmitted data packet.

     imagen 3.11
     imagen 3.12

     The rdt2.1 sender and receiver FSMs each now have twice as many states as
     before. This is because the protocol state must now reflect whether the
     packet currently being sent (by the sender) or expected (at the receiver)
     should have a sequence number of 0 or 1. Note that the actions in those
     states where a 0- numbered packet is being sent or expected are mirror
     images of those where a 1-numbered packet is being sent or expected; the
     only differences have to do with the handling of the sequence number.

     Protocol rdt2.1 uses both positive and negative acknowledgments from the
     receiver to the sender. When an out-of-order packet is received, the
     receiver sends a positive acknowledgment for the packet it has
     received. When a corrupted packet is received, the receiver sends a
     negative acknowledgment. We can accomplish the same effect as a NAK if,
     instead of sending a NAK, we send an ACK for the last correctly received
     packet.

     A sender that receives two ACKs for the same packet (that is, receives
     duplicate ACKs) knows that the receiver did not correctly receive the
     packet following the packet that is being ACKed twice.

     One subtle change between rtdt2.1 and rdt2.2 is that the receiver must now
     include the sequence number of the packet being acknowledged by an ACK
     message (this is done by including the ACK , 0 or ACK , 1 argument in
     ~make_pkt()~ in the receiver FSM), and the sender must now check the
     sequence number of the packet being acknowledged by a received ACK message
     (this is done by including the 0 or 1 argument in ~isACK()~ in the sender
     FSM).

*** RDT 3.0: TDC sobre un canal con perdidas y errores
    Ahora tambien se asume que el canal de comunicacion tiene perdida de paquetes.

    1. como detectar perdida de paquetes?
    2. que hacer cuando ocurre?

    el uso de checksums, numeros de secuencias, paquetes ACK, y retransmisiones
    nos permiten responder la segunda pregunta.

    supongamos que el emisor transmite un paquete y que este paquete, o su ACK,
    se pierden. en cualquier caso el emisor no recibe una respuesta del
    receptor.  si el emisor esta dispuesto a esperar lo suficiente para
    asegurarse de que el paquete se perdio, puede luego retransmitir el paquete.

    pero cuanto tiempo debe esperar para asegurarse de que un paquete se perdio?

    But how long must the sender wait to be certain that something has been
    lost?

    claramente debe esperar al menos el tiempo rtt mas el tiempo requerido para
    procesar el paquete en el receptor. esto es muy dificil de
    determinar. ademas el protocolo deberia recuperarse de la perdida de paquete
    lo mas rapido posible.

    si un ACK no se recibe dentro de este tiempo, el paquete es
    retransmitido. notar que si el paquete sufre de mucho delay, el emisor puede
    retransmitir aunque no se haya perdido el paquete o su ACK. esto introduce
    la posibilidad de tener paquetes de datos duplicados (solucionado en rdt
    2.2 con numeros de secuencia).

    imagen 3.14

    el emisor no sabe si
    - el paquete se perdio
    - el ACK se perdio
    - el paquete o el ACK tuvieron mucho delay.

    en cualquiera de los casos, la accion el la misma, retransmitir.

    implementar el mecanismo de retransmision basado en timers requiere de un
    timer capaz de interrumpir al emisor.  el emisor debe luego:
    1. empezar el timer cada vez que un paquete se envia (ya sea por primera vez
       o una retransmision).
    2. responder a la interrupcion del timer, tomando acciones apropiadas.
    3. frenar el timer

    imagen 3.15

    imagen 3.16
  