#+TITLE: Ventana deslizante y TCP
#+date: <2020-05-29 Fri>

* TODO Pipelined reliable Data Transfer Protocols

  Protocol rdt3.0 is a functionally correct protocol, but its performance
  problem is the fact that it is a stop-and-wait protocol.

  imagen 3.16

  This stop-and-wait protocol limits the sender ~utilization~ of the channel
  (the amount of time the sender actually sends bits into the channel).

  image 3.17


  The solution to this particular performance problem is simple: Rather than
  operate in a stop-and-wait manner, the sender is allowed to send multiple
  packets without waiting for acknowledgments.

  illustrated in Figure 3.17(b). Figure 3.18(b) shows that if the sender is
  allowed to transmit three packets before having to wait for acknowledgments,
  the utilization of the sender is essentially tripled.

  this technique is known as ~pipelining~. Pipelining has the following
  consequences for reliable data transfer protocols:

  - The range of sequence numbers must be increased, since each in-transit
    packet (not counting retransmissions) must have a unique sequence number and
    there may be multiple, in-transit, unacknowledged packets.
  - The sender and receiver sides of the protocols may have to buffer more than
    one packet. Minimally, the sender will have to buffer packets that have been
    transmitted but not yet acknowledged. Buffering of correctly received
    packets may also be needed at the receiver, as discussed below.
  - The range of sequence numbers needed and the buffering requirements will
    depend on the manner in which a data transfer protocol responds to lost,
    corrupted, and overly delayed packets. Two basic approaches toward pipelined
    error recovery can be identified: ~Go-Back-N~ and ~selective repeat~.

  imagen 3.18

** Go-Back-N (GBN)

   In a Go-Back-N (GBN) protocol, the sender is allowed to transmit multiple
   packets (when available) without waiting for an acknowledgment, but is
   constrained to have no more than some maximum allowable number, N, of
   unacknowledged packets in the pipeline.

   imagen 3.19

   Figure 3.19 shows the sender’s view of the range of sequence numbers in a GBN
   protocol. If we define ~base~ to be the sequence number of the oldest
   unacknowledged packet and ~nextseqnum~ to be the smallest unused sequence
   number (that is, the sequence number of the next packet to be sent), then
   four intervals in the range of sequence numbers can be identified.

   Sequence numbers in the interval
   - ~[ 0, base-1 ]~ correspond to packets that have already been transmitted
     and acknowledged.
   - ~[base, nextseqnum-1]~ corresponds to packets that have been sent but not
     yet acknowledged. Sequence numbers in the interval
   - ~[nextseqnum, base+N-1]~ can be used for packets that can be sent
     immediately, should data arrive from the upper layer.
   - ~[base+N, ...]~ cannot be used until an unacknowledged packet currently in
     the pipeline (specifically, the packet with sequence number ~base~ ) has
     been acknowledged.

   the range of permissible sequence numbers for transmitted but not yet
   acknowledged packets can be viewed as a window of size ~N~ over the range of
   sequence numbers.

   As the protocol operates, this window slides forward over the sequence number
   space. For this reason, ~N~ is often referred to as the ~window size~ and the
   GBN protocol itself as a ~sliding-window protocol~.

   You might be wondering *why we would even limit the number of outstanding,
   unacknowledged packets to a value of N?**. *Why not allow an unlimited number
   of such packets?*

   flow control is one reason to impose a limit on the sender. We’ll examine
   another reason to do so when we study TCP congestion control.

   In practice, a packet’s sequence number is carried in a fixed-length field in
   the packet header. If k is the number of bits in the packet sequence number
   field, the range of sequence numbers is thus


   Figures 3.20 and 3.21 give an extended FSM description of the sender and
   receiver sides of an ACK-based, NAK-free, GBN protocol.

   imagen 3.20

   imagen 3.21

   we have added variables (similar to programming-language variables) for base
   and nextseqnum , and added operations on these variables and conditional
   actions involving these variables.

   The GBN sender must respond to three types of events:
   - Invocation from above :: When rdt_send() is called from above, the sender
     first checks to see if the window is full, that is, whether there are N
     outstanding, unacknowledged packets.
     - If the window is not full, a packet is created and sent, and variables
       are appropriately updated.
     - If the window is full, the sender simply returns the data back to the
       upper layer, an implicit indication that the window is full.
     The upper layer would presumably then have to try again later. In a real
     implementation, the sender would more likely have either buffered (but not
     immediately sent) this data, or would have a synchronization mechanism (for
     example, a semaphore or a flag) that would allow the upper layer to call
     rdt_send() only when the window is not full.
   - Receipt of an ACK :: In our GBN protocol, an acknowledgment for a packet
     with sequence number n will be taken to be a ~cumulative acknowledgment~,
     indicating that all packets with a sequence number up to and including n
     have been correctly received at the receiver.
   - A timeout event :: The protocol’s name, “Go-Back-N,” is derived from the
     sender’s behavior in the presence of lost or overly delayed packets. As in
     the stop-and-wait protocol, a timer will again be used to recover from lost
     data or acknowledgment packets. If a timeout occurs, the sender resends all
     packets that have been previously sent but that have not yet been
     acknowledged. Our sender in Figure 3.20 uses only a single timer, which can
     be thought of as a timer for the oldest transmitted but not yet
     acknowledged packet. If an ACK is received but there are still additional
     transmitted but not yet acknowledged packets, the timer is restarted. If
     there are no outstanding, unacknowledged packets, the timer is stopped.


   The receiver’s actions in GBN are :
   - If a packet with sequence number n is received correctly and is in order
     (that is, the data last delivered to the upper layer came from a packet
     with sequence number ), the receiver sends an ACK for packet n and delivers
     the data portion of the packet to the upper layer.
   - In all other cases, the receiver discards the packet and resends an ACK for
     the most recently received in-order packet. Note that since packets are
     delivered one at a time to the upper layer, if packet k has been received
     and delivered, then all packets with a sequence number lower than k have
     also been delivered. Thus, the use of ~cumulative acknowledgments~ is a
     natural choice for GBN.


   *In our GBN protocol, the receiver discards out-of-order packets.*

   Recall that the receiver must deliver data in order to the upper
   layer. Suppose now that packet n is expected, but packet n+1 arrives. Because
   data must be delivered in order, the receiver could buffer packet n+1 and
   then deliver this packet to the upper layer after it had later received and
   delivered packet n. However, if packet n is lost, both it and packet n+1 will
   eventually be retransmitted as a result of the GBN retransmission rule at the
   sender.

   Thus, the receiver can simply discard packet.

   The advantage is the simplicity of receiver buffering—the receiver need not
   buffer any out-of-order packets. Thus, while the sender must maintain the
   upper and lower bounds of its window and the position of ~nextseqnum~ within
   this window, the only piece of information the receiver need maintain is the
   sequence number of the next in-order packet held in the variable
   ~expectedseqnum~.

   the disadvantage of throwing away a correctly received packet is that the
   subsequent retransmission of that packet might be lost or garbled and thus
   even more retransmissions would be required.

   imagen 3.22

   Figure 3.22 shows the operation of the GBN protocol for the case of a window
   size of four packets. Because of this window size limitation, the sender
   sends packets 0 through 3 but then must wait for one or more of these packets
   to be acknowledged before proceeding. As each successive ACK (for example,
   ACK0 and ACK1 ) is received, the window slides forward and the sender can
   transmit one new packet (pkt4 and pkt5, respectively). On the receiver side,
   packet 2 is lost and thus packets 3, 4, and 5 are found to be out of order
   and are discarded.

** Selective Repeat (SR)

   There are scenarios in which GBN itself suffers from performance problems. In
   particular, when the window size and bandwidth-delay product are both large,
   many packets can be in the pipeline. A single packet error can thus cause GBN
   to retransmit a large number of packets.

   As the name suggests, selective-repeat protocols avoid unnecessary
   retransmissions by having the sender retransmit only those packets that it
   suspects were received in error (that is, were lost or corrupted) at the
   receiver. This individual, as-needed, retransmission will require that the
   receiver individually acknowledge correctly received packets.

   A window size of N will again be used to limit the number of outstanding,
   unacknowledged packets in the pipeline. However, unlike GBN, the sender will
   have already received ACKs for some of the packets in the window.

   The SR receiver will acknowledge a correctly received packet whether or not
   it is in order. Out-of-order packets are buffered until any missing packets
   (that is, packets with lower sequence numbers) are received, at which point a
   batch of packets can be delivered in order to the upper layer.

   imagen 3.23

   #+caption: SR sender events and actions
   imagen 3.24

   #+caption: SR receiver events and actions
   imagen 3.25

   It is important to note that in Step 2 in Figure 3.25, the receiver
   reacknowledges (rather than ignores) already received packets with certain
   sequence numbers below the current window base.

   #+caption: SR operation
   imagen 3.26

   Given the sender and receiver sequence number spaces in Figure 3.23, for
   example, if there is no ACK for packet send_base propagating from the
   receiver to the sender, the sender will eventually retransmit packet
   send_base , even though it is clear (to us, not the sender!) that the
   receiver has already received that packet. If the receiver were not to
   acknowledge this packet, the sender’s window would never move forward! This
   example illustrates an important aspect of SR protocols (and many other
   protocols as well). The sender and receiver will not always have an identical
   view of what has been received correctly and what has not. For SR protocols,
   this means that the sender and receiver windows will not always coincide.


   The lack of synchronization between sender and receiver windows has important
   consequences when we are faced with the reality of a finite range of sequence
   numbers.

   #+BEGIN_EXAMPLE
   Consider what could happen, for example, with a finite range of four packet
   sequence numbers, 0, 1, 2, 3, and a window size of three.

   Suppose packets 0 through 2 are transmitted and correctly received and
   acknowledged at the receiver. At this point, the receiver’s window is over the
   fourth, fifth, and sixth packets, which have sequence numbers 3, 0, and 1,
   respectively. Now consider two scenarios.

   In the first scenario, shown in Figure 3.27(a), the ACKs for the first three
   packets are lost and the sender retransmits these packets. The receiver thus
   next receives a packet with sequence number 0—a copy of the first packet sent.

   In the second scenario, shown in Figure 3.27(b), the ACKs for the first three
   packets are all delivered correctly. The sender thus moves its window forward
   and sends the fourth, fifth, and sixth packets, with sequence numbers 3, 0, and
   1, respectively. The packet with sequence number 3 is lost, but the packet with
   sequence number 0 arrives—a packet containing new data.

   Now consider the receiver’s viewpoint in Figure 3.27, which has a figurative
   curtain between the sender and the receiver, since the receiver cannot “see” the
   actions taken by the sender. All the receiver observes is the sequence of
   messages it receives from the channel and sends into the channel. As far as it
   is concerned, the two scenarios in Figure 3.27 are identical. There is no way of
   distinguishing the retransmission of the first packet from an original
   transmission of the fifth packet. Clearly, a window size that is 1 less than the
   size of the sequence number space won’t work. But how small must the window size
   be? A problem at the end of the chapter asks you to show that the window size
   must be less than or equal to half the size of the sequence number space for SR
   protocols.
   #+END_EXAMPLE

   imagen 3.27

   Table 3.1 Summary of reliable data transfer mechanisms and their use

   | Mechanism               | Use, Comments                                                                                                                                                                                                                                                                                                                                                                                                                                |   |
   | Checksum                | Used to detect bit errors in a transmitted packet.                                                                                                                                                                                                                                                                                                                                                                                           |   |
   | Timer                   | Used to timeout/retransmit a packet, possibly because the packet (or its ACK) was lost within the channel. Because timeouts can occur when a packet is delayed but not lost (premature timeout), or when a packet has been received by the receiver but the receiver-to-sender ACK has been lost, duplicate copies of a packet may be received by a receiver                                                                                 |   |
   | Sequence number         | Used for sequential numbering of packets of data flowing from sender to receiver. Gaps in the sequence numbers of received packets allow the receiver to detect a lost packet. Packets with duplicate sequence numbers allow the receiver to detect duplicate copies of a packet.                                                                                                                                                            |   |
   | Acknowledgment          | Used by the receiver to tell the sender that a packet or set of packets has been received correctly. Acknowledgments will typically carry the sequence number of the packet or packets being acknowledged. Acknowledgments may be individual or cumulative, depending on the protocol.                                                                                                                                                       |   |
   | Negative acknowledgment | Used by the receiver to tell the sender that a packet has not been received correctly. Negative acknowledgments will typically carry the sequence number of the packet that was not received correctly.                                                                                                                                                                                                                                      |   |
   | Window, pipelining      | The sender may be restricted to sending only packets with sequence numbers that fall within a given range. By allowing multiple packets to be transmitted but not yet acknowledged, sender utilization can be increased over a stop-and-wait mode of operation. We’ll see shortly that the window size may be set on the basis of the receiver’s ability to receive and buffer messages, or the level of congestion in the network, or both. |   |

* Transporte Orientado a Conexion: TCP

  TCP esta definido en RFC 793, RFC 1122, RFC 1323, RFC 2018, RFC 2581.

** The TCP Connection

   Se dice que TCP es orientado a conexion porque antes que una aplicacion
   comienze a tranferir datos, ambos procesos deben primero realizar un
   handshake con el otro, es decir, deben enviarse segmentos preliminares entre
   si para establecer parametros para la transferencia de datos.

   esta connexion tcp es una conexion logica punto-a-punto (no se puede hacer
   multicast). el estado de la conexion es mantenido por ambos extremos de la
   misma y no por elementos intermedios de la red. se provee un servicio
   full-duplex, es decir que ambos extremos pueden enviar y recibir datos al
   mismo tiempo.

   # handshake
   si un host quiere comunicarse con otro, primero envia un paquete especial al
   otro host; el otro host responde con un segundo paquete especial y por ultimo
   el primer host responde con un tercer paquete especial. Los primeros dos
   paquetes no contienen payload (datos de capa de aplicacion), el tercero puede
   no tener.

   este proceso para establecer la conexion se lo conoce como =three-way
   handshake=.

   Una vez establecida la conexion, los procesos pueden enviar y recibir datos
   entre si. Cuando un proceso envia datos a traves del socket a TCP, TCP los
   redirige al =buffer de salida= de la conexion, que fue creado en el proceso
   del handshake. Cada cierto tiempo, TCP toma pedazos del buffer y los pasa a
   la capa de red.

   # que?
   la cantidad maxima de datos que se pueden enviar a la vez esta limitada por
   el =maximum segment size (MSS)=. En general se determina a partir del frame
   mas largo que puede ser enviado por el host que envia (=maximum transmission
   unit, MTU=).
   # 1ro se determina el mtu y despues el mss

   Un valor tipico del MSS es 1460B. Observar que el MSS es la cantidad maxima
   de datos que una aplicacion puede enviar en el segmento y no el tamaño maximo
   del segmento TCP.

   TCP agrupa pares de datos-del-cliente con un encabezado TCP, formando
   =segmentos TCP=, que son pasados a la capa de red.

   Del otro lado de la conexion, cuando se recibe un segmento, este es colocado
   en el buffer de recepcion de la conexion. La aplicacion lee datos de este
   buffer. Cada lado de la conexion tiene su propio buffer de envio y buffer de
   recepcion.

   imagen 3.28

   la conexion TCP consiste de buffers, variables y un socket asociado a un
   proceso en un host y otro conjunto de buffers, variables y un socket asociado
   a un proceso en otro host.

** Estructura del segmento TCP

   el segmento consiste de campos del encabezado y el campo de datos.

   el campo de datos contiene datos de la aplicacion.  el mss limita el tamaño
   de este campo.

   los campos del encabezado incluyen
   - puertos de origen y destino (multiplexacion y demultiplexacion),
   - campo de checksum,
   - numero de secuencia y numero de ACK, ambos numeros de 32 bits.
   - el campo =receive window= de 16 bits, utilizado para control de
     flujo. indica la cantidad de bytes que el receptor puede aceptar.
   - el campo =largo del encabezado= de 4 bits, especifica el largo del
     encabezado TCP en words de 32 bits, ya que puede ser de tamaño variable. en
     general el encabezado es de 20 bytes.
   - campo de =opciones=, opcional y de tamaño variable, utilizado para negociar
     el mss o como factor de escala para el tamaño de la ventana.
   - campo de =flags= de 6 bits. =Bit de ACK=, utilizado para indicar que el
     valor en el =campo de ACK= es valido.  Los bits de =RST=, =SYN=, y =FIN=
     son utilizados para establecer y abandonar la conexion.  Los bits =CWR= y
     =ECE= son utilizados para notificar congestion. El bit =PSH= indica que el
     receptor deberia enviar los datos a la capa de arriba inmediatamente. El
     bit =URG= es utilizado para indicar que el transmisor marca a los datos
     como urgentes.

   imagen 3.29

*** Numeros de secuencia y ACK

    los dos campos mas importantes de TCP son:
    - el campo de numero de secuencia
    - el campo de numero de acuse de recibo

    que son criticos para la TDC

    imagen 3.30

    tcp ve los datos como un stream de bytes, sin estructura pero ordenados. el
    uso de numeros de secuencia refleja esta perspectiva porque los numeros de
    secuencia son sobre los bytes transmitidos y no sobre los segmentos
    transmitidos. el =numero de secuencia de un segmento= es entonces el numero
    de byte del stream correspondiente al primer byte del segmento.

    # ejemplo num secuencia
    un proceso en el host a quiere enviar un stream de datos a un proceso en el
    host b sobre tcp. tcp en el host a, numera a cada byte del stream de datos.
    supongamos que:
    - el stream es de 500000 B
    - mss 1000 B
    - el primer byte del stream tiene numero 0.

    tcp contruye 500 segmentos a partir del stream. al primer segmento se le
    asigna el numero de secuencia 0, al segundo el numero 1000, luego 2000, y
    asi sucesivamente y se colocan en el campo de numero de secuencia del
    segmento.
    # fin ejemplo num secuencia

    consideremos a los numeros de acuse de recibo. recordemos que tcp es full
    duplex. el numero de ACK del segmento, es el proximo byte que el receptor
    espera a recibir del emisor, es decir, es el numero de secuencia del ultimo
    segmento recibido mas uno.

    # ejemplo num ack
    supongamos que el host a recibio todos los bytes numerados del 0 al 535 del
    host b, y que el host a esta a punto de enviar un segmento a B. el host A
    esta esperando a el byte 536 y el resto de los bytes del stram del host
    B. el host A coloca 536 en el campo de numero de acuse de recibo en el
    segmento que envia a B.

    si host A recibe segmentos con bytes de 0 a 535 y 900 a 1000, en el proximo
    segmento que envie el host A, tendra el numero de ack 536, para reconstruir
    el stream de datos original.
    # fin ejemplo num ack

    al solamente hacer ack de bytes hasta el primer byte faltante, se dice que
    tcp provee =cumulative acknowledgments=.

    si tcp recibe segmentos fuera de orden (como el ejemplo anterior), tcp
    puede:
    - descartar segmentos fuera de orden
    - mantener a los segmentos fuera de orden y esperar a que los bytes
      faltantes llenen los espacios.
    ya que en los rfc, no esta especificado este comportamiento.


    ambos lados de la conexion eligen un numero de secuencia inicial aleatorio.
    esto es para minimizar la probabilidad de que un segmento de una conexion
    anterior, que este todavia presente en la red sea interpretado cono legitimo
    para otra conexion entre los mismos hosts (y que tambien utilice a los
    mismos puertos).

** Estimacion de Timeout y RTT (Round-Trip Time)

   claramente, el tiempo de timeout deberia ser mas largo que el tiempo de rtt
   (es tiempo que tarda un paquete desde que es enviado hasta que se reciba su
   ack). si no, se haran retransmisiones innecesarias.

*** Estimando el RTT

    la mayoria de las implementaciones de tcp, toma una muestra del rtt a la
    vez, es decir que se muestrea el rtt para uno de los segmentos transmitidos
    y que todavia no fue confirmada su recepcion. esto quiere decir que se
    muestrea un rtt cada rtt. nunca se calcula un rtt de un segmento que fue
    retransmitido, solo segmentos que son transmitidos una vez.

    claramente, los valores del muestreo fluctuan entre segmentos debido a
    la congestion en la red. tcp mantiene una estimacion para mitigar
    fluctuaciones entre muestras. la estimacion se actualiza con una nueva
    muestra segun:

    $$Estimated_{RTT} = (1-\alpha)Estimated_{RTT} + \alpha Sample_{RTT}$$

    [RFC 6298] recomienda el valor \alpha = 0.125

    tambien es util estimar la variabilidad del rtt. [RFC 6298] define a la
    variacion del rtt como:

    $$Dev_{RTT} = (1-\beta)Dev_{RTT} + \beta |Sample_{RTT}-Estimated_{RTT}|$$

    con $\beta = 0.25$.

** TDC

   [RFC 6298] recomienda que se utilice un solo timer para retransmisiones,
   incluso si hay multiples paquetes transmitidos pero todavia no confirmados.

*** TODO Escenarios

    imagen 3.34

    Host A sends one segment to Host B. Suppose that this segment has sequence
    number 92 and contains 8 bytes of data. After sending this segment, Host A
    waits for a segment from B with acknowledgment number 100. Although the
    segment from A is received at B, the acknowledgment from B to A gets
    lost. In this case, the timeout event occurs, and Host A retransmits the
    same segment. Of course, when Host B receives the retransmission, it
    observes from the sequence number that the segment contains data that has
    already been received. Thus, TCP in Host B will discard the bytes in the
    retransmitted segment.

    imagen 3.35

    Host A sends two segments back to back. The first segment has sequence
    number 92 and 8 bytes of data, and the second segment has sequence number
    100 and 20 bytes of data. Suppose that both segments arrive intact at B, and
    B sends two separate acknowledgments for each of these segments. The first
    of these acknowledgments has acknowledgment number 100; the second has
    acknowledgment number 120. Suppose now that neither of the acknowledgments
    arrives at Host A before the timeout.  When the timeout event occurs, Host A
    resends the first segment with sequence number 92 and restarts the timer. As
    long as the ACK for the second segment arrives before the new timeout, the
    second segment will not be retransmitted.

    imagen 3.36

    Host A sends the two segments, exactly as in the second example. The
    acknowledgment of the first segment is lost in the network, but before the
    timeout event, Host A receives an acknowledgment with acknowledgement
    number 120. Host A therefore knows that Host B has received everything up
    through byte 119; so Host A does not resend either of the two segments.

*** Duplicando el intervalo de timeout

    cuando ocurre un timeout, configura el proximo tiempo de timeout al doble
    del anterior.

    Esta moficicacion provee una forma limitada de control de congestion. La
    expiracion del timer, probablemente es causada por congestion en la red.

*** TODO Fast retransmit

    timeout-triggered retransmissions can be relatively long. When a segment is
    lost, this long timeout period forces the sender to delay resending the lost
    packet, thereby increasing the end-to-end delay. Fortunately, the sender can
    often detect packet loss well before the timeout event occurs by noting
    so-called duplicate ACKs. A =duplicate ACK= is an ACK that reacknowledges a
    segment for which the sender has already received an earlier acknowledgment.


    To understand the sender’s response to a duplicate ACK, we must look at why
    the receiver sends a duplicate ACK in the first place.

    | Event                                                                                                                    | TCP Receiver Action                                                                                                                               |
    | Arrival of in-order segment with expected sequence number. All data up to expected sequence number already acknowledged. | Delayed ACK. Wait up to 500 msec for arrival of another in-order segment. If next in-order segment does not arrive in this interval, send an ACK. |
    | Arrival of in-order segment with expected sequence number. One other in-order segment waiting for ACK transmission.      | One Immediately send single cumulative ACK, ACKing both in-order segments.                                                                        |
    | Arrival of out-of-order segment with higher-than-expected sequence number. Gap detected.                                 | Immediately send duplicate ACK, indicating sequence number of next expected byte (which is the lower end of the gap).                             |
    | Arrival of segment that partially or completely fills in gap in received data.                                           | Immediately send ACK, provided that segment starts at the lower end of gap.                                                                       |

    When a TCP receiver receives a segment with a sequence number that is larger
    than the next, expected, in-order sequence number, it detects a gap in the
    data stream—that is, a missing segment. This gap could be the result of lost
    or reordered segments within the network. Since TCP does not use negative
    acknowledgments, the receiver cannot send an explicit negative
    acknowledgment back to the sender. Instead, it simply reacknowledges (that
    is, generates a duplicate ACK for) the last in-order byte of data it has
    received.

    If the TCP sender receives three duplicate ACKs for the same data, it takes
    this as an indication that the segment following the segment that has been
    ACKed three times has been lost. In the case that three duplicate ACKs are
    received, the TCP sender performs a =fast retransmit= [RFC 5681],
    retransmitting the missing segment before that segment’s timer expires. This
    is shown in Figure 3.37, where the second segment is lost, then
    retransmitted before its timer expires.

    imagen 3.37

*** Go-Back-N o Selective Repeat?

    TCP es un protocolo Go-Back-N o Selective Repeat?

    recordemos que los acks de tcp son cumulativos y que los segmentos
    correctamente recibidos pero fuera de orden no son confirmados por el
    receptor.  el emisor tcp solo mantiene el menor numero de secuencia
    transmitido pero no confirmado (SendBase) y el numero de secuencia a
    transmitir (NextSeqNum). en este sentido, tcp es un protocolo gbn.

    aunque, hay diferencias entre gbn y tcp. muchas implementaciones de tcp, si
    guardan segmentos recibidos fuera de orden. tambien consideremos el caso en
    que se transmiten y reciben los paquetes de 1 a N, pero se pierde el ack
    para el paquete n<N, pero el resto de los N-1 acuses de recibo llegan al
    emisor antes de que expire el timer. en este caso gbn, retransmitiria el
    paquete n y el resto n+1,n+2,...,N. tcp por el otro lado, solo retransmite
    el segmento n en caso de que el timer de n expire antes de llegar el acuse
    de n+1.

    una modificacion propuesta en [RFC 2018] para TCP, permite a tcp confirmar
    paquetes recibidos fuera de orden de forma selectiva en vez de confirmar de
    forma cumulativa al utlimo paquete recibido correctamente en orden. esto
    hace que se parezca al protocolo de selective repeat.
  