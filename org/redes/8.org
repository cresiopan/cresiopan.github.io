#+TITLE: Data Plane - Arquitectura de routers, IP y framentación
#+date: <2020-09-24 Thu>

la capa de red se puede descomponer en dos partes que interactuan entre si, el
~data plane~ y ~control plane~.

las funciones del ~data plane~ de la capa de red son las funciones por-enrutador
que determinan cómo un datagrama (paquete de capa de red) que llega a uno de los
enlaces de entrada de un enrutador se reenvía a uno de los enlaces de salida.

las funciones del ~control plane~ de la capa de red es la lógica de toda la red
que controla cómo se enruta un datagrama entre enrutadores a lo largo de una
ruta de extremo a extremo desde el host de origen al host de destino.

Tradicionalmente, estos protocolos de enrutamiento del plano de control y el
forwarding se han implementado juntas, monolíticamente, dentro de un enrutador.

en ~Software-defined networking (SDN)~, se separan explícitamente el ~data
plane~ y ~control plane~ mediante la implementación de las funciones del
~control plane~ como un servicio separado, normalmente en un "controlador"
remoto.

* Overview of the Network Layer

Figure 4.1 shows a simple network with two hosts, H1 and H2, and several routers
on the path between H1 and H2. Let’s suppose that H1 is sending information to
H2, and consider the role of the network layer in these hosts and in the
intervening routers. The network layer in H1 takes segments from the transport
layer in H1, encapsulates each segment into a datagram, and then sends the
datagrams to its nearby router, R1. At the receiving host, H2, the network layer
receives the datagrams from its nearby router R2, extracts the transport-layer
segments, and delivers the segments up to the transport layer at H2.


la funcion principal del data plane de cada router es enviar datagramas desde
los enlaces de entrada a los de salida

la funcion principal del control plane es coordinar las acciones de envio
por-router para que los datagramas lleguen a su destino.

los routers no ejecutan protocoloes de capa de aplicacion o capa de transporte

imagen 4.1

** Forwarding y Routing: The Data and Control Planes

el rol principal de la capa de red es mover paquetes del host emisor al host
receptor.

*** Forwarding
cuando un paquete llega al router por el enlace de entrada, el router debe
moverlo al enlace de salida apropiado.

For example, a packet arriving from Host H1 to Router R1 in Figure 4.1 must be
forwarded to the next router on a path to H2.


forwarding es solo una funcion implementada en el data plane.

en otro caso, un paquete puede tener la salida bloqueada de un router (por ej,
si el paquete se origina de host malicioso conocido o si tiene un host destino
prohibido), o puede ser duplicado y enviado por multiples enlaces de salida.

para lograr el forwarding, un router tiene una =forwarding table=. en router
envia un paquete al examinar los valores de algunos campos del paquete, y los
consulta en la tabla que termina indicando el enlace de salida apropiado para
dicho paquete.

*** Routing
la capa de red debe determinar la ruta o el camino que deben seguir los paquetes
a medida que fluyen desde el origen a su destino. Los algortimos de enrutamiento
calculan estos caminos. El enrutamiento es implementado en el control plane.

imagen 4.2

*** Control Plane: The Traditional Approach
como se configuran las forwading tables?

el algoritmo de enrutamiento determina el contenido de las tablas. este se
ejecuta en cada router y ambas funciones de forwarding y ruteo estan contenidas
en el router.

el algoritmo de ruteo de un router se comunica con otro de otro router para
calcular los valores para la forwarding table.

*** Control Plane: The SDN Approach

imagen 4.3

un metodo alternativo consiste de un controlador remoto fisicamente separado,
computa y distribuye las forwarding tables a cada router.

el enrutamiento es separado fisicamente del router, solamente realiza
forwarding.

el controlador remoto puede estar implementado en un data center, con alta
redundancia y confiabilidad

** Network Service Model
El =network service model= define las caracteristicas de la entrega de paquetes
end-to-end.

Algunos posibles servicios que puede ofrecer la capa de red son:
- Entrega garantizada :: Se garantiza que un paquete enviado de un host
  eventualmente llegara a su destino
- Entrega garantizada con demora limitada :: Ademas de garantizar la entrega del
  paquete, tambien se garantiza sera completada dentro de una cantidad de
  tiempo.
- entrega de paquete en order :: se garantiza que los paquetes arrivan al
  destino en el orden en que se enviaron.
- Ancho de banda minimo garantizado :: se emula el comportamiento de un enlace
  de transmision de una velocidad garantizada. ?
- Seguridad :: encriptacion de los datagramas en el origen y decriptacion en el
  destino.

la capa de red de la internet provee un solo servicio, =best-effort service= en
donde no hay garantias de entrega, entrega eventual u orden de los paquetes

* Qué hay adentro de un router?

imagen 4.4

A high-level view of a generic router architecture is shown in Figure 4.4.

Se pueden identificar cuatro componentes de un router:
- Puertos de entrada :: se realiza una funcion de lookup en el puerto de
  entrada. La tabla de forwarding es consultada para determinar el puerto de
  salida. Los paquetes de control (por ej paquetes con informacion de protocolos
  de ruteo) son enviados del puerto de entrada al procesador.
- Switching fabric :: Conecta a los puertos de entrada con los de salida.
- Puertos de salida :: almacena paquetes recibidos de la switching fabric y los
  transmite al enlace saliente.
- Procesador :: realiza las funciones del control plane. en routers
  tradicionales, ejecuta los protocolos de ruteo, administra las tablas de ruteo
  y el estado de los enlaces, calcula la forwarding table. En routers SDN, el
  procesador se comunica con el controlador remoto para recibir entradas de la
  forwarding table.

** Input Port Processing and Destination-Based Forwarding

imagen 4.5
#+caption: vista detallada del procesamiento de entrada.

La forwarding table es copiada del procesador a las line cards sobre un bus
aparte. Con una copia en cada puerto, las decisiones de forwarding pueden
hacerse de forma local sin invocar al procesador por cada paquete entrante y asi
evitar cuellos de botella.

#+caption: forwarding table con 4 interfaces
| Destination Address Range           | Link Interface |
|-------------------------------------+----------------|
| 11001000 00010111 00010000 00000000 |              0 |
| through                             |                |
| 11001000 00010111 00010111 11111111 |                |
|-------------------------------------+----------------|
| 11001000 00010111 00011000 00000000 |              1 |
| through                             |                |
| 11001000 00010111 00011000 11111111 |                |
|-------------------------------------+----------------|
| 11001000 00010111 00011001 00000000 |              2 |
| through                             |                |
| 11001000 00010111 00011111 11111111 |                |
|-------------------------------------+----------------|
| Otherwise                           |              3 |
|-------------------------------------+----------------|

#+caption: forwarding table utilizando prefijos
| Prefix                     | Link Interface |
|----------------------------+----------------|
| 11001000 00010111 00010    |              0 |
| 11001000 00010111 00011000 |              1 |
| 11001000 00010111 00011    |              2 |
| Otherwise                  |              3 |

Con el ultimo estile de la tabla de forwarding, el router encuentra un prefijo
de la direccion de destino entre las entradas de la table; si hay alguna
conincidencia, el router envia el paquete al enlace asociado.

si hay multiples conincidencias, el router utiliza el =longest prefix matching
rule=; esto es, encuentra el prefijo mas largo que coincide y envia el paquete a
la interfaz asociada.

el paquete es enviado al puerto de salida mediante la switching fabric.

otras acciones ocurren en la etapa de procesamiento en el puerto de entrada
1) procesamiento de capa fisica y capa de enlace
2) los campos de version de numero del paquete, checksum y time-to-live son verificados y los ultimos dos campos deben ser reescritos
3) se actualizan los contadores utilizados para la administracion de la red (ej la cantidad de datagramas IP recibidos)

** Switching

los paquetes son enviados de los puertos de entrada a los de salida mediante la switching fabric

- Switching via memoria :: los primeros routers eran computadoras tradicionales. El switcheo de paquetes lo realizaba la CPU. Los puertos de entrada y salida funcionaban como dispostivos de I\O tradicionales en un sistema operativo. Se indicaba el arribo de un paquete con una interrupcion, se copiaba el paquete en memoria, se procesaba y copiaba al puerto de salida correspondiente.
- Switching via bus :: un puerto de entrada tranfiere el paquete directamente al puerto de salida por sobre un bus compartido, sin intervencion del procesador. esto se logra haciendo que el puerto de entrada anteponga un encabezado al paquete indicando el puerto de salida y enviandolo por el bus. todos los puertos de salida reciben el paquete pero solo el que coincida con el encabezado lo guarda y le quita el encabezado. solo un paquete se puede transferir por el bus a la vez. el ancho de banda esta limitado por la velocidad del bus.
- Switching via red de interconexiones :: un crossbar switch es una red de interconexion que consiste de 2N buses que conectan N puertos de entrada a N puertos de salida. Cada bus vertical intersecta con uno horizontal formando una malla que puede ser controlada. Multiples paquetes pueden ser transferidos en simultaneo mientras no se dirijan al mismo puerto. Un crossbar switch es no bloqueante: un paquete enviado a un puerto de salida no sera bloqueado siempre y cuando no haya otro paquete siendo enviado al puerto de salida.

imagen 4.6

** Procesamiento del puerto de salida

se toman paquetes que fueron almacenados en la memoria del puerto y se transmiten por el enlace. esto incluye seleccion, desencolado de paquetes y la funciones de capa fisica y capa de enlace necesarias.

imagen 4.7

** Where Does Queuing Occur?
Las colas de paquetes se pueden formar en los puertos de entrada y de salida. La
ubicacion y tamaño del encolado va a depender de la carga de trafico, la
velocidad de la switching fabric y la velocidad de line card.

*** Encolado en la entrada

Si la velocidad de switcheo es mas rapida que la de transmision, el encolado sera despreciable.

=head-of-the-line (HOL) blocking= un paquete en la cola de entrada debe esperar
a ser transferido por la switching fabric porque el primer paquete de la misma
cola (head of line) esta bloqueado.

imagen 4.8

cuando no hay suficiente memoria para guardar el paquete entrante, se debe
decidir entre descartar el paquete (politica ~drop-tail~) o remover paquetes
encolados. En algunos casos puede ser conveniente descartar (o marcar) un
paquete antes de que se llene la cola y luego enviar una señal al amisor
(algortimos ~active queue management~).

*** Encolado en la salida

Se pueden formar colas en los puertos de salida cuando la switching fabric es
mas rapida que la velocidad de transmision.

imagen 4.9

how much buffering is required? [RFC 3439] indica que la cantidad de buffering
(B) deberia ser igual a el (RTT) promedio multiplicado por la capacidad del
enlace (C).

$$ B = RTT * C$$

** Packet Scheduling

Decide el puerto de entrada a atender.

*** FIFO
Esta politica selecciona paquetes para su transmision segun su orden de llagada a la cola del puerto de salida

imagen 4.10

imagen 4.11

*** Cola de prioridad
Los paquetes entrantes al puerto de salida son clasificados en clases de prioridades apenas llegan a la cola.

En la practica, se configura la cola para que los paquetes con informacion para la administracion de la red tengan prioridad sobre trafico de usuarios.

imagen 4.12

Cada clase tiene su propia cola. Se deben transmitir todos los paquetes de una cola de mayor prioridad antes continuar con las demas.

imagen 4.13

*** Round Robin (RR) y Weighted Fair Queuing (WFQ)
En Round Robin, los paquetes son ordenados en clases como en la politica de
cola-de-prioridad. La diferencia es que el servicio a las colas se alterna sin
prioridad.

La politica =work-conserving queuing= (encolado de conservacion de trabajo) nunca permite que el enlace permanezca desocupado cuando haya paquetes (de cualquier clase) encolados para ser transmitidos. Una politica
work-conserving round robin que busca paquetes de una clase pero no encuentra ninguno, pasa a la siguiente clase.

imagen 4.14

En la politica =weighted fair queuing (WFQ)=, los paquetes entrantes son clasificados y encolados en al area de espera de la clase apropiada. Como en RR, las clases se van sirviendo en orden; cuando no hay mas paquetes en una, se pasa a la siguiente. La diferencia entre WFQ y RR es que cada clase puede recibir una cantidad de servicio mas que otra clase. A cada clase $i$ se le asigna un peso, $w_{i}$. Durante cualquier intervalo de tiempo donde hay que enviar clase_{i} paquetes, la clase i tiene garantizada recibir ($w_{i}/\sum_{j}w_{j}$) de servicio, donde la suma en el denominador es tomada sobre todas las clases que tambien tienen paquetes para transmitir. En el peor caso, la clase i tiene garantizada una fraccion del ancho de banda. Para un enlace con velocidad de transmision R, la clase i siempre tendra un throughput de al menos $R*w_{i}/\sum_{j}w_{j}$.

* IP

Existen dos versiones de IP en  uso hoy en dia.

** IPv4 [RFC 791]

imagen 4.16

*** Formato de Datagrama

campos clave del datagrama IPv4:

- Version number :: 4 bits la version del protocolo del datagrama. El router lo puede utilizar para determinar como interpretar el resto del datagrama.
- Header length :: un datagrama IPv4 puede contener una cantidad variable de opciones. Cuatro bits determinan donde en el datagrama comienza el payload. La mayoria de los datagramas no contiene opciones por lo que tienen un encabezado de 20 Bytes.
- Type of service :: Los bits de =TOS= fueron incluidos para permitir que
  diferentes tipos de datagramas sean distinguibles unos de otros. Por ej,
  datagramas de tiempo real y de no tiempo real. Es configurado por el
  administrador de red del router.
- Datagram length :: tamaño total del datagrama (encabezado + datos) en bytes. Numero de 16 bits, por lo que el maximo teorico es 65535 bytes. Rara vez son mayores a 1500 bytes.
- Identifier, flags, fragmentation offset :: Tienen que ver con la framentacion IP.
- Time-to-live :: El campo =TTL= se incluye para asegurarse de que los datagramas no circulen para siempre por la red. Se decrementa en uno cada vez que es procesado por un router. Si llega a cero, es descartado.
- Protocol :: Tipicamente utilizado cuando el datagrama llega a su destino. El valor indica el protocolo especifico de capa-de-transporte (IANA Protocol Numbers 2016). El numero de protocolo es el pegamento que une a la capa-de-red con la capa-de-transporte. (como los puertos unen transpote con aplicacion)
- Header checksum :: Asiste al router para detectar errores de bits en el datagrama. Si el checksum no coincide con el computado, se descarta. Debe ser reescrito ya que cambian algunos campos del encabezado (TTL, opciones).
- Source and destination IP addresses :: Cuando el host origen crea un
  datagrama, inserta su propia direccion IP y la del host destino en estos
  campos.
- Options :: permiten extender el encabezado IP.
- Data (payload) :: contiene el segmento de capa de transporte para ser entregado.

Asumiendo que no se utiliza el campo de opciones, el encabezado es de 20 Bytes.

Si el segmento que se transporta es de TCP, el datagrama tiene 40 bytes de encabezado (20 bytes de TCP)

*** Fragmentacion de Datagramas

La cantidad maxima de datos que un frame de capa de enlace puede llevar es llamado
=maximum transmission unit (MTU)=.
Debido a que cada datagrama es encapsulado dentro de un frame, el MTU limita el largo de un datagrama IP. La limitacion no es un problema en si, lo que lo es, es que cada enlace de la ruta entre emisor y receptor pueden utilizar distintos protocolos de capa de enlace, y que estos protocolos tengan diferentes MTUs.

Ante el problema de "apretar" un datagrama IP en el campo de payload de un frame de capa de enlace, la solucion es fragmentar el payload en el datagrama IP en dos o mas datagramas pequeños, encapsulando cada uno de estos en un frame separado; y enviar estos frames por el enlace de salida. A cada uno de estos datagramas se los llama =fragmentos=.

Los fragmentos deben ser reensamblados antes llegar a la *capa-de-transporte* en el destino. Los protocolos de capa-de-transporte esperan recibir un datagrama completo de la capa-de-red. El reensamblado ocurre en el destino.

Para permitir al host destino realizar la tarea de reensamblado, se hace uso de los campos de identificacion, flag, y ~framentation offset~ en el encabezado del datagrama IP.

Tipicamente, el host emisor incrementa el numero de identificacion para datagrama que envia. Cuando un router debe fragmentar un datagrama, cada framento es marcado con las ip de origen y destino y el numero de indentificacion del datagrama original.

Para que el host destino se asegure de haber recibido todos los fragmentos, el ultimo fragmento es marcado con un bit en 0, mientras que el resto de los fragmentos tienen un 1. El campo de ~offset~ tambien es utilizado para verificar si falta algun fragmento.

imagen 4.17
  