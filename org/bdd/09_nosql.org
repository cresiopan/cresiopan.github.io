#+title: No SQL
#+date:



Page 1















NoSQL
75.15 / 75.28 / 95.05 - Base de Datos
NoSQL


10 de octubre de 2018

|

|
10 de octubre de 2018







Page 2


















NoSQL
Topics
1
Introducción
2
Bases de datos distribuidas
3
Bases de datos NoSQL

Bases de datos wide column vs. por columnas

4
El modelo MapReduce
5
Teorema CAP
6
Bibliografía

|

|
10 de octubre de 2018







Page 3


















NoSQL
|
Introducción
1
Introducción
2
Bases de datos distribuidas
3
Bases de datos NoSQL

Bases de datos wide column vs. por columnas

4
El modelo MapReduce
5
Teorema CAP
6
Bibliografía

|

|
10 de octubre de 2018







Page 4






















NoSQL
|
Introducción
Introducción
Contexto histórico
tecnológicos.
de datos que tuvieran:
1
Mayor
escalabilidad
para trabajar con grandes volúmenes de datos
(Google Inc., 2005).
2
Mayor
performance en aplicaciones Web
Surgen XML (1998) y JSON (1999), entre otros.

|

|
10 de octubre de 2018

[ELM16 24.1.2]






Page 5



















NoSQL
|
Introducción
Introducción
Contexto histórico
3
Mayor
flexibilidad
sobre las estructuras de datos
para organizar los datos en una forma semi-estructurada.
4
Mayor capacidad de
distribución
Se prioriza la capacidad de procesamiento distribuido.

|

|
10 de octubre de 2018







Page 6





















NoSQL
|
Introducción
Introducción
Limitaciones de las bases relacionales
trata de escalar los sistemas:
El manejo de transacciones en forma distribuida no escala.
http://www.enterpriseintegrationpatterns.com/ramblings/18_
starbucks.html

|

|
10 de octubre de 2018







Page 7





















NoSQL
|
Introducción
Introducción
NoSQL
Contexto de los últimos 15 años:
2000
2010
2015
Almacenam. (vel.)
+50MB/s (HDD)
+50MB/s (HDD)
+500MB/s (SSD)
Almacenam. ($)
10US$/GB
0,10US$/GB
0,70US$/GB
Red
100Mbps
1Gbps
10 Gbps
CPU
≈1GHz
≈3GHz
≈3GHz
DRAM (vel.)
2 GB/s (DDR)
10 GB/s (DDR3)
20 GB/s (DDR4)
DRAM
800 US$/GB
30 US$/GB
6 US$/GB
Redes cada vez más rápidas
3
y almacenamiento más barato
3
,
pero velocidad de procesamiento estancada
7
.
Se gestó el concepto
“NoSQL”
como todo aquello en el mundo de
las BD’s que no estuviera basado en el modelo relacional ó SQL.

|

|
10 de octubre de 2018







Page 8















NoSQL
|
Introducción
Introducción
El universo de los SGBD
Basado en:
https://blogs.the451group.com/information_management20121102updated-database-landscape-graphic/.

|

|
10 de octubre de 2018







Page 9


















NoSQL
|
Introducción
Clasificación de SGBD’s No-SQL
Las bases de datos No-SQL se clasifican en distintos tipos:
Bases de datos basadas en grafos
híbrido de varios de estos tipos.

|

|
10 de octubre de 2018

[ELM16 24.1.3]






Page 10


















NoSQL
|
Bases de datos distribuidas
1
Introducción
2
Bases de datos distribuidas
3
Bases de datos NoSQL

Bases de datos wide column vs. por columnas

4
El modelo MapReduce
5
Teorema CAP
6
Bibliografía

|

|
10 de octubre de 2018







Page 11


















NoSQL
|
Bases de datos distribuidas
Bases de datos distribuidas
Contexto
de ellas implementan la funcionalidad de un
sistema de gestión
de bases de datos distribuido (SGBD distribuido)
.
introduciremos algunos conceptos sobre SGBD’s distribuidos.

|

|
10 de octubre de 2018







Page 12




















NoSQL
|
Bases de datos distribuidas
Bases de datos distribuidas
Temas
Hablaremos de:
Modelos de consistencia
Consistencia eventual

|

|
10 de octubre de 2018







Page 13





















NoSQL
|
Bases de datos distribuidas
Bases de datos distribuidas
Fragmentación
La
fragmentación
es la tarea de dividir los datos de una tabla
Se realiza con dos objetivos:
una parte de las consultas para luego integrar los resultados.
Según la manera de fragmentar, podemos distinguir entre:
Fragmentación horizontal:
Las filas de cada tabla se reparten entre
las filas. Generalmente se divide a partir del valor de un atributo.
Fragmentación vertical:
Distintos nodos guardan un subconjunto de
relativas a la clave primaria.
En general se utiliza una combinación de ambas.

|

|
10 de octubre de 2018

[ELM16 23.2.1; CONN15 24.4.2]






Page 14





















NoSQL
|
Bases de datos distribuidas
Bases de datos distribuidas
Replicación
La
replicación
es el proceso por el cual se almacenan múltiples
Nos brinda varias ventajas:
Funciona como
mecanismo de backup
, que permite recuperar el
algunos nodos.
se denominan
réplicas secundarias
. Cuando también pueden
hacer procesamiento, se las conoce como
réplicas primarias
.
La replicación nos genera un nuevo problema a resolver: la
consistencia
de los datos.
menos, temporalmente) distintos valores para un mismo dato.

|

|
10 de octubre de 2018

[ELM16 23.2.1; CONN15 26.2]






Page 15


















NoSQL
|
Bases de datos NoSQL
1
Introducción
2
Bases de datos distribuidas
3
Bases de datos NoSQL

Bases de datos wide column vs. por columnas

4
El modelo MapReduce
5
Teorema CAP
6
Bibliografía

|

|
10 de octubre de 2018







Page 16


















NoSQL
|
Bases de datos NoSQL
|
Bases de datos clave-valor
1
Introducción
2
Bases de datos distribuidas
3
Bases de datos NoSQL
Bases de datos clave-valor
Bases de datos wide column
Bases de datos wide column vs. por columnas

4
El modelo MapReduce
5
Teorema CAP
6
Bibliografía

|

|
10 de octubre de 2018







Page 17





















NoSQL
|
Bases de datos NoSQL
|
Bases de datos clave-valor
Bases de datos clave-valor
Las
bases de datos clave-valor (key-value stores)
almacenan lo
valor).
Ejemplo: (“nombre”, “Luis Poretti”), (“saldo”, 5100)
Algunos ejemplos de key-value stores son:
Redis

|

|
10 de octubre de 2018

[ELM16 24.4]






Page 18



















NoSQL
|
Bases de datos NoSQL
|
Bases de datos clave-valor
Bases de datos clave-valor
elementales:
Insertar un nuevo par
(put)
Eliminar un par existente
(delete)
Actualizar el valor de un par
(update)
Encontrar un par asociado a una clave particular
(get)
Las ventajas de los key-value stores son:
Simplicidad
no de interrelaciones entre los datos.
Velocidad
los datos.
Escalabilidad
distribuida) y permiten repartir las consultas entre los nodos.

|

|
10 de octubre de 2018







Page 19




















NoSQL
|
Bases de datos NoSQL
|
Bases de datos clave-valor
Dynamo
Dynamo
es el key-value store de Amazon.
Está diseñado siguiendo una
arquitectura orientada a servicio
(SoA)
: la base de datos está distribuida en un
server cluster
que
Utiliza un modelo de
hashing consistente
que reduce la cantidad
de nodos S.
con un impacto mínimo.
Utiliza un modelo de consistencia denominado
consistencia
eventual
, que tolera pequeñas inconsistencias en los valores
Es totalmente descentralizado. Los nodos son peers entre sí.
Carece de un punto único de falla.

|

|
10 de octubre de 2018







Page 20


















NoSQL
|
Bases de datos NoSQL
|
Bases de datos clave-valor
Dynamo
Hashing consistente
Disponemos de una
función de hash
h() que, dada una clave k ,
representa la cantidad de nodos de procesamiento.
Esto es lo que se conoce como una
tabla de hash distribuida
(DHT)
.
ligeramente distinta, conocida como hashing consistente.

|

|
10 de octubre de 2018

[ELM16 24.4.2]






Page 21

















NoSQL
|
Bases de datos NoSQL
|
Bases de datos clave-valor
Dynamo
Hashing consistente
estructura de anillo por hash creciente.
Regla:
Un par (k , v ) se replicará en los N servidores siguientes a
h(k ), que conformarán el listado de preferencia para esa clave.

|

|
10 de octubre de 2018







Page 22

























NoSQL
|
Bases de datos NoSQL
|
Bases de datos clave-valor
Modelos de consistencia
Consistencia secuencial
En el estudio de la
replicación
en las bases de datos distribuidas
se utilizan distintos
modelos de consistencia
.
datos centralizadas, es el de
consistencia secuencial
.
lectura, R
P
i
(
X ) y de escritura, W
P
i
(
X ), sobre una base de datos
distribuida.
→ ¡Los procesos están en distintas máquinas!
ejecutan una después de otra”.
→ Queremos ver si el conjunto de órdenes locales de las
instrucciones se corresponde con algún hipotético orden global.
Atención!
Esto no quiere decir que los procesos se ejecuten uno
otra no haya terminado de aplicarse en todas las réplicas.

|

|
10 de octubre de 2018

[TURU17]






Page 23




















NoSQL
|
Bases de datos NoSQL
|
Bases de datos clave-valor
Modelos de consistencia
Consistencia secuencial
Para indicar el valor leído/escrito utilizaremos esta notación:
W (X )b indica que el proceso escribió el valor b en el ítem X .
Ejemplo:
El valor inicial de a es 30, y el de b es 12.
P
1
R(b)12
R(a)3
W(a)20
P
2
R(a)30
R(b)12
W(a)3
W(b)8
P
3
R(a)20
Nota: Misma columna no implica mismo
tiempo físico. ¡Los procesadores pueden
no tener sus relojes sincronizados!
Tiempo local
−−−−−−−−−−−−→
de las instrucciones:
P
1
R(b)12
R(a)3
W(a)20
P
2
R(a)30
R(b)12
W(a)3
W(b)8
P
3
R(a)20
Tiempo universal
−−−−−−−−−−−−−−→
Por lo tanto, esta ejecución tiene consistencia secuencial.

|

|
10 de octubre de 2018







Page 24





















NoSQL
|
Bases de datos NoSQL
|
Bases de datos clave-valor
Modelos de consistencia
Consistencia secuencial
Pero en la siguiente ejecución, en cambio:
P
1
R(b)8
R(a)30
W(a)20
P
2
R(a)30
R(b)12
W(a)3
W(b)8
P
3
R(a)20
Tiempo local
−−−−−−−−−−−−→
No existe una ejecución secuencial equivalente. Evidentemente, P
1
Esta ejecución no tiene consistencia secuencial.
de respuesta.

|

|
10 de octubre de 2018







Page 25



















NoSQL
|
Bases de datos NoSQL
|
Bases de datos clave-valor
Modelos de consistencia
Consistencia causal
En el modelo de
consistencia causal
se busca capturar eventos
que puedan estar causalmente relacionados.
requiere que todos vean al evento a antes que al evento b.
Ejemplo: Supongamos que un proceso P
1
escribe un ítem X .
Simultáneamente, un proceso P
2
lee el ítem X y escribe el ítem
todos las vean en el mismo orden.
mismo orden.
todos en el mismo orden.”

|

|
10 de octubre de 2018

[TURU17]






Page 26



















NoSQL
|
Bases de datos NoSQL
|
Bases de datos clave-valor
Modelos de consistencia
Consistencia causal
a = 5, b = 7 y c = 9:
P
1
W(a)5
R(c)20
R(b)7
P
2
W(b)10
R(b)10
R(c)9
P
3
W(c)20
Tiempo local
−−−−−−−−−−−−→
lo tanto es consistente que sean vistas por P
1
y P
2
en órdenes
distintos.
tiene consistencia secuencial.

|

|
10 de octubre de 2018







Page 27



















NoSQL
|
Bases de datos NoSQL
|
Bases de datos clave-valor
Modelos de consistencia
Consistencia causal
b = 7:
P
1
W(a)20
P
2
R(a)20
W(b)3
P
3
R(b)3
R(a)5
Tiempo local
−−−−−−−−−−−−→
deben ser vistas por todos en el mismo orden.
Sin embargo, P
3
las ve en el orden W (b)3 → W (a)20 mientras
que P
2
las ve en el orden W (a)20 → W (b)3.
Esta ejecución no tiene consistencia causal.

|

|
10 de octubre de 2018







Page 28





















NoSQL
|
Bases de datos NoSQL
|
Bases de datos clave-valor
Modelos de consistencia
Consistencia eventual
El modelo de
consistencia eventual
está basado en la siguiente
observación:
escribe sean vistas por los procesos que leen.
valores).

|

|
10 de octubre de 2018

[TURU17]






Page 29



















NoSQL
|
Bases de datos NoSQL
|
Bases de datos clave-valor
Dynamo
Modelo de consistencia eventual
Dynamo provee un modelo de
consistencia eventual
, que permite
asincrónica.
rápidamente.
propagarlo a las N − 1 réplicas antes de confirmar la escritura.
cualquier réplica, es posible leer un valor no actualizado.
para una operación de put o get.

|

|
10 de octubre de 2018







Page 30

















NoSQL
|
Bases de datos NoSQL
|
Bases de datos clave-valor
Dynamo
Modelo de consistencia eventual
Se definen dos parámetros adicionales:
R ≤ N: Quorum de lectura
Quorum de escritura W
el valor almacenado tiene un nivel de replicación mínimo.
Quorum de lectura R
la lectura.

|

|
10 de octubre de 2018







Page 31
















NoSQL
|
Bases de datos NoSQL
|
Bases de datos clave-valor
Dynamo
Consistencia eventual
Algunos valores comunes de R y W son:
N
R
W
3
2
2
Buena durabilidad y latencia (paper).
3
3
1
Lectura más lenta, pero pobre durabilidad. Escritura rápida.
3
1
3
Escrituras más lentas. Muy buena durabilidad y lectura rápida.

|

|
10 de octubre de 2018







Page 32

















NoSQL
|
Bases de datos NoSQL
|
Bases de datos clave-valor
Dynamo
Aplicaciones
distribuido para gestionar su sitio de comercio electrónico.
plataforma de cloud computing de Amazon.
las búsquedas sean siempre por clave.
estructura:
(“NombreEntidad:ValorAtributoClave:NombreAtributo”, ValorAtributo)

|

|
10 de octubre de 2018







Page 33

















NoSQL
|
Bases de datos NoSQL
|
Bases de datos clave-valor
Dynamo
Aplicaciones
haríamos:
put(“PreciosProductos:E34:Precio”, 499.00)
Y para consultar la cantidad disponible del producto F80:
cantidad = get(“PreciosProductos:F80:CantidadDisponible”)
Hadoop sobre Dynamo.

|

|
10 de octubre de 2018







Page 34


















NoSQL
|
Bases de datos NoSQL
|
Bases de datos wide column
1
Introducción
2
Bases de datos distribuidas
3
Bases de datos NoSQL
Bases de datos clave-valor
Bases de datos wide column
Bases de datos wide column vs. por columnas

4
El modelo MapReduce
5
Teorema CAP
6
Bibliografía

|

|
10 de octubre de 2018







Page 35























NoSQL
|
Bases de datos NoSQL
|
Bases de datos wide column
Bases de datos wide column
Pero estas bases de datos permiten
agregar columnas en forma
dinámica
a una fila, convirtiéndola en una fila ancha
(wide row)
1
.
de la entidad con otra entidad. (
Ejemplo:
Un Cliente que va
Las más conocidas son:
Apache HBase (basado en las ideas de BigTable)
[ELM16 24.5]
clave/valor)
1
Aunque por motivos históricos su nombre quedó como wide column.

|

|
10 de octubre de 2018







Page 36





















NoSQL
|
Bases de datos NoSQL
|
Bases de datos wide column
Cassandra
Cassandra
es una base de datos NoSQL de tipo
wide
column
. Es un híbrido entre las bases de datos por
columnas y las clave/valor.
Arquitectura
share-nothing
.
→ ¡Muy alta escalabilidad!
Está optimizado para ofrecer una
alta tasa de escrituras
.

|

|
10 de octubre de 2018







Page 37




















NoSQL
|
Bases de datos NoSQL
|
Bases de datos wide column
Cassandra
Key spaces y column families
SGBD’s relacionales
Cassandra
Esquema
Keyspace
Tabla
Column family
Fila
Fila
-
Wide row
En Cassandra, el concepto análogo al de tabla es el de
column
family (familia de columnas)
.
Una
fila
está compuesta por:
Un conjunto de pares clave/valor ó
columnas
Para Cassandra, cada
columna
no es más que un par clave/valor
asociado a una fila.
Cada
keyspace (esquema)
puede estar distribuido en varios
nodos de nuestro
cluster
.

|

|
10 de octubre de 2018







Page 38



















NoSQL
|
Bases de datos NoSQL
|
Bases de datos wide column
Cassandra
Key spaces y column families
Creamos un nuevo key space con la siguiente instrucción en CQL:
CREATE KEYSPACE
empresa_db
WITH
replication = {
’ class ’
:
’ SimpleStrategy ’
,
’ replication_factor ’
: 1 };
Asignamos este key space como aquél por defecto:
USE
empresa_db ;
Creación de un column family :
CREATE COLUMNFAMILY
clientes (
cuit
int
,
nombre
text
,
domicilio
text
,
primary key
( cuit ));
¡Es obligatorio definir una clave primaria!

|

|
10 de octubre de 2018







Page 39















NoSQL
|
Bases de datos NoSQL
|
Bases de datos wide column
Cassandra
Esquema lógico de una fila

|

|
10 de octubre de 2018

[CASS16 4]






Page 40
























NoSQL
|
Bases de datos NoSQL
|
Bases de datos wide column
Cassandra
Wide rows
dinámicamente en función de las necesidades.
Ejemplo:
Si un cliente nos compra Libros, quisiéramos agregar por
las columnas...
7
En realidad, lo que definimos es un listado de columnas, del cual
las filas pueden tomar varias, y cada una más de una vez.
convirtió en una
wide row (fila ancha)
.

|

|
10 de octubre de 2018







Page 41

















NoSQL
|
Bases de datos NoSQL
|
Bases de datos wide column
Cassandra
Esquema lógico de una wide-row
Nuestra clave primaria queda ahora dividida en dos partes: una
clave de partición
y una
clave de clustering
.
Adicionalmente, podemos tener
columnas estáticas
, que sean
únicas por cada partition key (por ejemplo, el nombre del Cliente).

|

|
10 de octubre de 2018

[CASS16 4]






Page 42

















NoSQL
|
Bases de datos NoSQL
|
Bases de datos wide column
Cassandra
Clave primaria: Definición en CQL
La definición de esta column family es:
CREATE COLUMNFAMILY
clientes (
nro_cliente
int
,
nombre
text static
,
ISBN
bigint
,
nombre_libro
text
,
primary key
(( nro_cliente ), ISBN ));

|

|
10 de octubre de 2018







Page 43



















NoSQL
|
Bases de datos NoSQL
|
Bases de datos wide column
Cassandra
Clave primaria: Esquema lógico
La clave primaria en Cassandra se divide en dos partes:
La clave de particionado
(partition key)
La clave de clustering
(clustering key)
compuestas.
filas de una column family con igual valor en la clave primaria.
para identificar a la wide-row (en el ejemplo anterior, al Cliente).
Veremos que
no siempre vamos a pedir que la clave sea minimal
.
búsquedas que tengamos que hacer en esa column family.

|

|
10 de octubre de 2018







Page 44

















NoSQL
|
Bases de datos NoSQL
|
Bases de datos wide column
Cassandra
Clave primaria: Esquema físico
La correcta definición de la
clave primaria
es fundamental para el
para responder consultas.
contigua en disco en un mismo nodo.
las columnas dentro de la wide-row.

|

|
10 de octubre de 2018







Page 45























NoSQL
|
Bases de datos NoSQL
|
Bases de datos wide column
Cassandra
Clave primaria: restricciones
column family
2
:
1
columnas que formen parte de la clave primaria.
2
Las columnas que forman parte de la partition key
deben
ser
comparadas por igual contra valores constantes en los predicados.
3
dicha columna en la definición de la clave primaria.
4
comparadas por igual, y las posteriores no deben ser utilizadas.
2
Ver: “A Big Data Modeling Methodology for Apache Cassandra”, A. Chebotko, A.
Kashlev, S. Lu, IEEE International Congress on Big Data, 2015.

|

|
10 de octubre de 2018







Page 46

















NoSQL
|
Bases de datos NoSQL
|
Bases de datos wide column
Cassandra
Tipos de dato
Los tipos de dato básicos son similares a los de SQL:
int
, smallint, bigint, float, decimal
text
, varchar
timestamp
, date, time
uuid
(clave surrogada)
boolean
como tipos de dato:
set
(conjunto de elementos)
list
(lista ordenada de elementos)
map
(conjunto de pares clave/valor)

|

|
10 de octubre de 2018







Page 47























NoSQL
|
Bases de datos NoSQL
|
Bases de datos wide column
Cassandra
Reglas de diseño
cuenta los siguientes puntos:
1
No existe el concepto de junta
. Si para alguna consulta típica
guardarla como una
tabla desnormalizada
más desde el comienzo.
2
No existe el concepto de integridad referencial
. Si la necesitamos,
debe ser manejada desde el nivel de aplicación.
3
Desnormalización de datos
. En las bases de datos NoSQL el uso
por un único motivo:
performance
.
4
Diseño orientado a las consultas
. ¿Cómo saber qué tablas crear si
no sabemos cuáles son las consultas a hacer?
diseñar las tablas.

|

|
10 de octubre de 2018

[CASS16 5]






Page 48



















NoSQL
|
Bases de datos NoSQL
|
Bases de datos wide column
Cassandra
Objetivos de diseño. Diagramas Chebotko
Buscamos que:
clave primaria.
Nosotros utilizaremos uno de los más conocidos:
Chebotko
.

|

|
10 de octubre de 2018







Page 49



















NoSQL
|
Bases de datos NoSQL
|
Bases de datos wide column
Cassandra
Ejemplo
A continuación desarrollaremos un ejemplo en Python:
1-Instalación del servidor de Cassandra
Descargar de http://cassandra.apache.org/download/.
2-Instalación de la API para Python 3.0
1,2
pip install cassandra-driver
3-Lanzamiento del servidor de Cassandra
bin/cassandra -f (requiere Java 7 JVM).
1
Para la instalación de Python 3.0 sugerimos utilizar Anaconda
(https://www.continuum.io/downloads).
2
Alternativa: conectarnos al servidor directamente desde el shell (bin/cqlsh).

|

|
10 de octubre de 2018







Page 50

















NoSQL
|
Bases de datos NoSQL
|
Bases de datos wide column
Cassandra
Ejemplo: Base de datos de una biblioteca
préstamos en una biblioteca. Partimos del siguiente diagrama:
Socio
Nro. Socio
Nombre
Domicilio
Tel´efono
Mail
tiene
1
Ejemplar
N
Nro.Orden
pertenece
N
Libro
1
ISBN
Nombre
Idioma
A˜
no
escrito por
N
Autor
N
Nombre
pertenece
N
G´enero
N
Nombre
1

|

|
10 de octubre de 2018







Page 51


















NoSQL
|
Bases de datos NoSQL
|
Bases de datos wide column
Cassandra
Ejemplo: Base de datos de una biblioteca. Workflow
responder.
consultas:
Q1
: Buscar libro por género
Q2
: Buscar libro por nombre
Q3
: Buscar libro por ISBN
Q4
: Ver información de un libro
Q5
: Ver información de un socio
Q6
: Ver ejemplares disponibles de un libro
Q7
: Asignar ejemplar a un socio
Q8
: Consultar ejemplares que posee un socio
Q9
: Encontrar socios morosos (con préstamos vencidos)

|

|
10 de octubre de 2018







Page 52
















NoSQL
|
Bases de datos NoSQL
|
Bases de datos wide column
Cassandra
Ejemplo: Base de datos de una biblioteca. Workflow
El siguiente sería un posible workflow para nuestros datos:
Buscar libro
x género
Buscar libro
x nombre
Buscar libro
x ISBN
Ver info de
libro
Buscar
ejemplares
disponibles
libro
Ver info de
socio
Ver
ejemplares
socio
Asignar
ejemplar a
socio
Buscar
socios
morosos

|

|
10 de octubre de 2018







Page 53















NoSQL
|
Bases de datos NoSQL
|
Bases de datos wide column
Cassandra
Ejemplo: Base de datos de una biblioteca. Diagrama Chebotko
Por cada consulta idearemos una column family que la resuelva:

|

|
10 de octubre de 2018







Page 54
















NoSQL
|
Bases de datos NoSQL
|
Bases de datos wide column
Cassandra
Ejemplo: Base de datos de una biblioteca. Column-families
CREATE COLUMNFAMILY
socios (
nro_socio
int
,
nombre
text
,
domicilio
text
,
telefono
set
&lt;
int
&gt;,
mail
set
&lt;
text
&gt;,
primary key
( nro_socio )
);
CREATE COLUMNFAMILY
prestamos_por_socio (
nro_socio
int
,
ISBN
bigint
,
nro_orden
int
,
nombre
text
,
vencimiento
date
,
primary key
(( nro_socio ), ISBN , nro_orden )
);

|

|
10 de octubre de 2018







Page 55
















NoSQL
|
Bases de datos NoSQL
|
Bases de datos wide column
Cassandra
Ejemplo: Base de datos de una biblioteca. Column-families
CREATE COLUMNFAMILY
ejemplares_dispon (
ISBN
bigint
,
nro_orden
int
,
primary key
(( ISBN ), nro_orden )
);
CREATE COLUMNFAMILY
prestamos_por_fecha (
vencimiento
date
,
nro_socio
int
,
ISBN
bigint
,
nro_orden
int
,
primary key
(( vencimiento ), nro_socio , ISBN , nro_orden )
);
...

|

|
10 de octubre de 2018







Page 56



















NoSQL
|
Bases de datos NoSQL
|
Bases de datos wide column
Cassandra
Ejemplo: Base de datos de una biblioteca. Ejercicios en CQL.
1
ejemplar y la fecha de vencimiento del préstamo.
SELECT
nombre , ISBN , nro_orden
FROM
prestamos_por_socio
WHERE
nro_socio = 751;
2
del mismo.
SELECT
autor
FROM
libros
WHERE
ISBN = 14292859338291;

|

|
10 de octubre de 2018







Page 57



















NoSQL
|
Bases de datos NoSQL
|
Bases de datos wide column
Cassandra
Ejemplo: Base de datos de una biblioteca. Ejercicios en CQL.
3
de ejemplares disponibles y asígnelo en préstamo al socio.
DELETE FROM
prestamos_por_socio
WHERE
nro_socio = 751
AND
ISBN = 55102184963921
AND
nro_orden = 2;
INSERT INTO
ejemplares_dispon ( ISBN , nro_orden )
VALUES
(55102184963921 , 2);

|

|
10 de octubre de 2018







Page 58
















NoSQL
|
Bases de datos NoSQL
|
Bases de datos wide column
|
Bases de datos wide column vs. por columnas
Bases de datos por columnas
filas. Cada fila se convierte en un registro de un archivo físico.
El modelo de
base de datos por columnas (column-oriented
databases)
, en cambio, almacena cada columna de una tabla en
una estructura propia.
daremos aquí algunos detalles sobre ellas.
negocios y el data warehousing.
HANA y Infobright.

|

|
10 de octubre de 2018







Page 59




















NoSQL
|
Bases de datos NoSQL
|
Bases de datos wide column
|
Bases de datos wide column vs. por columnas
Bases de datos por columnas
Manejo de columnas
Esto tiene varias ventajas:
También es más sencillo cambiar el tipo de dato de una columna.
datos de longitud variable en representaciones de longitud fija.
De esta forma no es costoso recuperar una fila!

|

|
10 de octubre de 2018







Page 60























NoSQL
|
Bases de datos NoSQL
|
Bases de datos wide column
|
Bases de datos wide column vs. por columnas
Bases de datos por columnas
Manejo de columnas
Optimización de consultas
Ejemplo:
nos lleva a realizar la proyección antes de la selección.
Aplicación a Data warehouses
Los
cubos de datos OLAP
típicamente almacenan los resultados
agregados de la junta de múltiples tablas.
R(cliente, mes, dia, producto, cantidad )
mucho más eficiente.

|

|
10 de octubre de 2018







Page 61

















NoSQL
|
Bases de datos NoSQL
|
Bases de datos wide column
|
Bases de datos wide column vs. por columnas
Bases de datos por columnas
Bases de datos basadas en columnas
recuperar los datos.
pocas columnas en el contexto de bases de datos grandes.
Aplicación a procesamiento OLAP (data warehouses).
Ejemplos:
SAP HANA

|

|
10 de octubre de 2018







Page 62






















NoSQL
|
Bases de datos NoSQL
|
Bases de datos wide column
|
Bases de datos wide column vs. por columnas
Bases de datos por columnas
Ejemplo: SAP HANA
Es una base de datos
en memoria
, pensada para ofrecer alta
SAP certifica el hardware sobre el que corre HANA.
Ejemplo:
Según SAP, IBM tiene certificado un cluster que totaliza
factor de corrección de 2, esto totaliza
196 TB de capacidad de
almacenamiento de datos en memoria.
Fuente: “Implementing SAP
HANA”, SAP PRESS, 2014.
Ventajas/desventajas:
3
Velocidad de acceso
3
Big data
7
¡La contrapartida es el costo! La RAM cuesta ∼ 10 veces más
que el almacenamiento SSD.

|

|
10 de octubre de 2018







Page 63


















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
1
Introducción
2
Bases de datos distribuidas
3
Bases de datos NoSQL

Bases de datos wide column vs. por columnas
Bases de datos orientadas a documentos
Bases de datos basadas en grafos
4
El modelo MapReduce
5
Teorema CAP
6
Bibliografía

|

|
10 de octubre de 2018







Page 64



















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
Bases de datos orientadas a documentos
En las
bases de datos orientadas a documentos
, un
documento
bajo una cierta estructura.
manejar estructuras un poco más complejas que un simple
clave:
valor
.
un conjunto de pares
clave: valor
que representan los atributos
La estructura de un documento típicamente se describe con un
lenguaje de intercambio de datos (data exchange language)
.
Ejemplos: HTML, XML, JSON, BSON, YAML...

|

|
10 de octubre de 2018







Page 65





















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
Bases de datos orientadas a documentos
Algunos ejemplos son:
RavenDB
A continuación tomaremos
MongoDB
como
mayor detalle.

|

|
10 de octubre de 2018







Page 66



















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
Bases de datos orientadas a documentos
MongoDB
Basada en hashes para identificar a los objetos.
No utiliza esquemas (schema-free). No existe un DDL.
Los documentos tienen un formato
JSON
.
Almacena por clave/valor.
Java, C#, ...
Su implementación de la operación de junta es limitada.
Organiza los datos de una base de datos en
colecciones
que
contienen
documentos
.
Modelo relacional
MongoDB
Esquema
Base de datos
Relación
Colección
Tupla
Documento
Atributo
Campo

|

|
10 de octubre de 2018

[ELM16 24.3]






Page 67






















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
MongoDB
JSON
1
Hamburguesa =
{
2
&#34; nombre &#34;
:
&#34; BigBacon &#34;
,
3
&#34; ingredientes &#34;
:
[
&#34; pan &#34;
,
&#34; carne &#34;
,
&#34; lechuga &#34;
,
&#34; salsa &#34;
,
&#34; pan &#34;
4
&#34; carne &#34;
,
&#34; tocino &#34;
,
&#34; queso &#34;
,
&#34; pepinillos &#34;
,
&#34; salsa &#34;
,
&#34; pan &#34;
]
,
5
&#34; precio &#34;
:
129
.
99
,
6
&#34; calorías &#34;
:
930
7
}
datos.
una alternativa a XML.
Un objeto JSON se delimita con
{}
y posee un conjunto de
atributos que se identifican como clave
:
valor.

|

|
10 de octubre de 2018







Page 68




















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
MongoDB
JSON
1
Hamburguesa =
{
2
&#34; nombre &#34;
:
&#34; BigBacon &#34;
,
3
&#34; ingredientes &#34;
:
[
&#34; pan &#34;
,
&#34; carne &#34;
,
&#34; lechuga &#34;
,
&#34; salsa &#34;
,
&#34; pan &#34;
4
&#34; carne &#34;
,
&#34; tocino &#34;
,
&#34; queso &#34;
,
&#34; pepinillos &#34;
,
&#34; salsa &#34;
,
&#34; pan &#34;
]
,
5
&#34; precio &#34;
:
129
.
99
,
6
&#34; calorías &#34;
:
930
7
}
Las claves en JSON son siempre strings.
ó NULL.
Por lo tanto, los atributos en MongoDB pueden ser multivaluados.

|

|
10 de octubre de 2018







Page 69




















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
MongoDB
Ejemplo
de MongoDB para Linux y la API de MongoDB para Python 3.0.
1-Instalación del servidor de MongoDB
sudo apt-get install mongodb-server
2-Instalación de la API para Python 3.0
1
pip install pymongo
3-Lanzamiento del servidor de MongoDB
mongod
1
Para la instalación de Python 3.0 sugerimos utilizar Anaconda
(https://www.continuum.io/downloads).

|

|
10 de octubre de 2018







Page 70


















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
MongoDB
Creación de documentos
from
pymongo
import
MongoClient
conn = MongoClient ()
conn . database_names ()
# Creamos una nueva base de datos
bd_empresa = conn . base_empresa
# Le agregamos una colección
col_clientes = bd_empresa . clientes
# Y le agregamos un documento a la colección
cliente1 = {
&#34; nombre &#34;
:
&#34; Mario &#34;
,
&#34; apellido &#34;
:
&#34; Wilkerson &#34;
,
&#34; domicilio &#34;
:
&#34; Av . Entre Ríos 1560 &#34;
}
id_cliente1 = col_clientes . insert_one ( cliente1 ). inserted_id

|

|
10 de octubre de 2018







Page 71

















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
MongoDB
Creación de documentos
# Insertamos tres clientes más
cliente2 = {
&#34; nombre &#34;
:
&#34; Horacio &#34;
,
&#34; apellido &#34;
:
&#34; Fonseca &#34;
,
&#34; localidad &#34;
:
&#34; Morón &#34;
}
id_cliente2 = col_clientes . insert_one ( cliente2 ). inserted_id
cliente3 = {
&#34; apellido &#34;
:
&#34; Gandría &#34;
,
&#34; localidad &#34;
:
&#34; Caballito &#34;
}
id_cliente3 = col_clientes . insert_one ( cliente3 ). inserted_id
cliente4 = {
&#34; apellido &#34;
:
&#34; Findo &#34;
,
&#34; nombre &#34;
:
&#34; Diego &#34;
,
&#34; localidad &#34;
:
&#34; Morón &#34;
}
id_cliente4 = col_clientes . insert_one ( cliente4 ). inserted_id

|

|
10 de octubre de 2018







Page 72

















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
MongoDB
Creación de documentos
#Y definimos algunos productos
col_productos = bd_empresa . productos
producto1 = {
&#34; código &#34;
:
&#34; FD2910 &#34;
,
&#34; nombre &#34;
:
&#34; Amoladora &#34;
,
&#34; precio &#34;
: 2200 }
producto2 = {
&#34; código &#34;
:
&#34; G49 &#34;
,
&#34; nombre &#34;
:
&#34; Cinta aisladora &#34;
,
&#34; precio &#34;
: 40 }
producto3 = {
&#34; código &#34;
:
&#34; EA315 &#34;
,
&#34; nombre &#34;
:
&#34; Pinza &#34;
}
id_producto1 = col_productos . insert_one ( producto1 ). inserted_id
id_producto2 = col_productos . insert_one ( producto2 ). inserted_id
id_producto3 = col_productos . insert_one ( producto3 ). inserted_id

|

|
10 de octubre de 2018







Page 73


















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
MongoDB
ObjectId’s
de un campo _id.
al documento que dicho hash identifica.
mismo documento en una colección
los hashes de los documentos creados.
pprint . pprint ( id_producto1 )
1
ObjectId (‘
59209152975790214370
fcf
1
’)

|

|
10 de octubre de 2018







Page 74























NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
MongoDB
Consultas básicas
El resultado es un
cursor
que debe ser iterado.
# Buscamos todos los clientes que son de Morón
respuesta_query = col_clientes . find ({
&#34; localidad &#34;
:
&#34; Morón &#34;
})
for
c
in
respuesta_query :
pprint . pprint (c)
1
{
‘_id ’
:
ObjectId (‘
59208626975790214370
fc
98
’)
,
2
‘ apellido ’
:
‘Fonseca ’
,
3
‘ localidad ’
:
‘Morón ’
,
4
‘nombre ’
:
‘Horacio ’
}
5
{
’_id ’
:
ObjectId (‘
59208626975790214370
fc
9
a ’)
,
6
‘ apellido ’
:
‘Findo ’
,
7
‘ localidad ’
:
‘Morón ’
,
8
‘nombre ’
:
‘Diego ’
}

|

|
10 de octubre de 2018







Page 75





















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
MongoDB
Documentos embebidos vs. referenciados
Podemos utilizar los ObjectId
0
s para
referenciar
objetos:
pedido1 = {
&#34; cod_pedido &#34;
: 78303 ,
&#34; cliente &#34;
: id_cliente2 ,
&#34; productos &#34;
: [ {
&#34; producto &#34;
: id_producto2 ,
&#34; cantidad &#34;
: 3} ],
&#34; fecha_entrega_limite &#34;
: datetime . datetime (2017 , 6, 18) ,
&#34; entregado &#34;
: False }
pprint . pprint ( pedido1 )
1
{
‘_id ’
:
ObjectId (‘
59209
fd
2975790214370
fcff ’)
,
2
‘cliente ’
:
ObjectId (‘
59209
fcd
975790214370
fcf
9
’)
,
3
‘ cod_pedido ’
:
78303
,
4
‘ entregado ’
:
False
,
5
‘ fecha_entrega_limite ’
:
datetime . datetime (
2017
,
6
,
18
,
0
,
0
)
,
6
‘ productos ‘
:
[{
‘ cantidad ’
:
3
,
7
‘ producto ’
:
ObjectId (‘
59209
fcf
975790214370
fcfd ’)
}]}

|

|
10 de octubre de 2018







Page 76





















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
MongoDB
Documentos embebidos vs. referenciados
1
{
‘_id ’
:
ObjectId (‘
59209
fd
2975790214370
fcff ’)
,
2
‘cliente ’
:
ObjectId (‘
59209
fcd
975790214370
fcf
9
’)
,
3
‘ cod_pedido ’
:
78303
,
4
‘ entregado ’
:
False
,
5
‘ fecha_entrega_limite ’
:
datetime . datetime (
2017
,
6
,
18
,
0
,
0
)
,
6
‘ productos ’
:
[{
‘ cantidad ’
:
3
,
7
‘ producto ’
:
ObjectId (‘
59209
fcf
975790214370
fcfd ’)
}]}
En este caso, el documento relativo al “cliente” queda
referenciado
dentro del pedido.
de documentos que se encuentran directamente
embebidos
(anidados)
dentro del pedido.
“producto”.

|

|
10 de octubre de 2018







Page 77




















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
MongoDB
Consultas sobre documentos embebidos y referenciados
# Buscamos los clientes que pidieron el producto 3:
result = col_pedidos . find ({
&#34; productos . producto &#34;
: id_producto3 })
for
cliente_id
in
result . distinct (
&#34; cliente &#34;
):
result2 = col_clientes . find ({
&#34; _id &#34;
: cliente_id })
for
cliente
in
result2 :
pprint . pprint ( cliente )
1
{
‘_id ’
:
ObjectId (‘
5920
a
5
ae
975790214370
fd
0
f ’)
,
2
‘ apellido ’
:
‘Fonseca ’
,
3
‘ localidad ’
:
‘Morón ’
,
4
‘nombre ’
:
‘Horacio ’
}
5
{
‘_id ’
:
ObjectId (‘
5920
a
5
ae
975790214370
fd
10
’)
,
6
‘ apellido ’
:
‘Gandría ’
,
7
‘ localidad ’
:
‘ Caballito ’
}

|

|
10 de octubre de 2018







Page 78





















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
MongoDB
Consultas sobre documentos embebidos y referenciados
# Buscamos los clientes que pidieron el producto 3:
result = col_pedidos . find ({
&#34; productos . producto &#34;
: id_producto3 })
for
cliente_id
in
result . distinct (
&#34; cliente &#34;
):
result2 = col_clientes . find ({
&#34; _id &#34;
: cliente_id })
for
cliente
in
result2 :
pprint . pprint ( cliente )
Como “productos” está embebido, utilizamos
.
para indicar el
subatributo.
debemos hacer una subconsulta para ir a buscar sus datos.
A qué se parece este tipo de consulta? Junta en SQL!!

|

|
10 de octubre de 2018







Page 79




















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
MongoDB
Juntas
forma eficiente.
a mano, como en el ejemplo anterior.
Pero, ¿y la
no redundancia
de datos? ¿y la
normalización
?
en el procesamiento de los datos.

|

|
10 de octubre de 2018







Page 80

















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
MongoDB
Juntas
entre colecciones completas.
concretos para una consulta en particular.
tiempo.
comando
lookup
, que permite realizar la junta entre dos
baja eficiencia.

|

|
10 de octubre de 2018







Page 81






















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
MongoDB
Agregación
pipeline.
# Calculamos la cantidad de clientes que viven en cada localidad ,
#y mostramos sólo aquellas en que vive a lo sumo un cliente :
result = col_clientes . aggregate ( [
{
&#34; $group &#34;
: {
&#34; _id &#34;
:
&#34; $localidad &#34;
,
&#34; cantidad &#34;
: {
&#34; $sum &#34;
: 1 } } },
{
&#34; $match &#34;
: {
&#34; cantidad &#34;
: {
&#34; $lte &#34;
:
1 } } } ])
for
cliente
in
result :
pprint . pprint ( cliente )
1
{
‘_id ’
:
‘ Caballito ’
,
‘ cantidad ’
:
1
}
2
{
‘_id ’
:
None
,
‘ cantidad ’
:
1
}

|

|
10 de octubre de 2018







Page 82


















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
MongoDB
Agregación
operaciones, entre otras:
match
: Filtrado de resultados.
group
: Agrupamiento de los resultados por uno o más atributos,
aplicando funciones de agregación.
sort
: Ordenamiento de resultados.
limit
: Limitado de resultados.
sample
: Selección aleatoria de resultados.
unwind
: Deconstrucción de un atributo de tipo vector.
utilizado como entrada por la siguiente operación del pipeline.
dentro del pipeline.

|

|
10 de octubre de 2018







Page 83




















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
MongoDB
Agregación: Restaurantes
puntajes de restaurantes extraída de:
https://raw.githubusercontent.com/mongodb/docs-assets/primer-dataset/primer-dataset.json
.
con la siguiente instrucción:
Importación de documentos JSON
restaurants.json
“restaurants” en la base de datos “test”.

|

|
10 de octubre de 2018







Page 84



















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
MongoDB
Agregación: Restaurantes
Cada documento de la colección tiene el siguiente aspecto:
1
Restaurant =
{
2
&#34; address &#34;
:
{
3
&#34; building &#34;
:
&#34;
1007
&#34;
,
4
&#34; coord &#34;
:
[
−
73
.
856077
,
40
.
848447
]
,
5
&#34; building &#34;
:
&#34; Morris Park Ave &#34;
,
6
&#34; zipcode &#34;
:
&#34;
10462
&#34;
7
}
8
&#34; borough &#34;
:
&#34; Bronx &#34;
,
9
&#34; cuisine &#34;
:
&#34; Bakery &#34;
,
10
&#34; grades &#34;
:
[
11
{
&#34; date &#34;
:
{
&#34; $date &#34;
:
1393804800
}
,
&#34; grade &#34;
:
&#34;A&#34;
,
&#34; score &#34;
:
2
}
,
12
{
&#34; date &#34;
:
{
&#34; $date &#34;
:
1358985600
}
,
&#34; grade &#34;
:
&#34;A&#34;
,
&#34; score &#34;
:
10
}
,
13
.....
14
{
&#34; date &#34;
:
{
&#34; $date &#34;
:
1322006400
}
,
&#34; grade &#34;
:
&#34;A&#34;
,
&#34; score &#34;
:
9
}]
,
15
&#34; name &#34;
:
&#34; Morris Park Bake Shop &#34;
,
16
&#34; restaurant_id &#34;
:
&#34;
30075445
&#34;
17
}

|

|
10 de octubre de 2018







Page 85





















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
MongoDB
Agregación: Restaurantes
# Ejemplo : Encontrar los 3 barrios en que hay más restaurantes italianos
result = col_restaurants . aggregate ( [
{
&#34; $match &#34;
: {
&#34; cuisine &#34;
: {
&#34; $eq &#34;
:
&#34; Italian &#34;
} } },
{
&#34; $group &#34;
: {
&#34; _id &#34;
:
&#34; $borough &#34;
,
&#34; cantidad &#34;
: {
&#34; $sum &#34;
: 1 } } },
{
&#34; $sort &#34;
: {
&#34; cantidad &#34;
:
−
1 } },
{
&#34; $limit &#34;
: 3 }
])
for
r
in
result :
pprint . pprint (r)
1
{
‘_id ’
:
‘ Manhattan ’
,
‘ cantidad ’
:
621
}
2
{
‘_id ’
:
‘ Brooklyn ’
,
‘ cantidad ’
:
192
}
3
{
‘_id ’
:
‘Queens ’
,
‘ cantidad ’
:
131
}

|

|
10 de octubre de 2018







Page 86



















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
MongoDB
# Ejemplo : Hallar nombre y puntaje de los 4 restaurantes de mayor
# puntaje que hayan recibido al menos 5 calificaciones
result = col_restaurants . aggregate ( [
{
&#34; $unwind &#34;
:
&#34; $grades &#34;
},
{
&#34; $group &#34;
: {
&#34; _id &#34;
:
&#34; $restaurant_id &#34;
,
&#34; nombre &#34;
: {
&#34; $first &#34;
:
&#34; $name &#34;
},
&#34; puntaje &#34;
: {
&#34; $avg &#34;
:
&#34; $grades . score &#34;
},
&#34; cant_calificaciones &#34;
: {
&#34; $sum &#34;
: 1 } } },
{
&#34; $match &#34;
: {
&#34; cant_calificaciones &#34;
: {
&#34; $gte &#34;
: 5 } } },
{
&#34; $sort &#34;
: {
&#34; puntaje &#34;
:
−
1 } },
{
&#34; $limit &#34;
: 4 },
{
&#34; $project &#34;
: {
&#34; nombre &#34;
:
&#34; $nombre &#34;
,
&#34; puntaje &#34;
:
&#34; $puntaje &#34;
} } ]) $
1
{
‘_id ’
:
‘
403934
’
,
‘nombre ’
:
‘ Bella Napoli ’
,
‘puntaje ’
:
38
.
6
}
2
{
‘_id ’
:
‘
412673
’
,
‘nombre ’
:
‘ Tenda Asian Fusion ’
,
‘puntaje ’
:
37
.
4
}
3
{
‘_id ’
:
‘
416025
’
,
‘nombre ’
:
‘Red Chopstick ’
,
‘puntaje ’
:
36
.
3
}
4
{
‘_id ’
:
‘
415504
’
,
‘nombre ’
:
‘El Mixteco ’
,
‘puntaje ’
:
34
.
8
}

|

|
10 de octubre de 2018







Page 87



















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
MongoDB
Ejemplo
archivo
mongo.ipynb
.
Quedan en el tintero...
Creación de índices

|

|
10 de octubre de 2018







Page 88






















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
MongoDB
Sharding
conocido como
sharding
.
chunks que se distribuyen en nodos denominados
shards
. Cada
Un
sharding cluster
de MongoDB está formado por distintos tipos
de nodos de ejecución:
Los
shards (fragmentos)
: Son los nodos en los que se distribuyen
Los
routers
: Son los nodos servidores que reciben las consultas
Los
servidores de configuración
: Son los que almacenan la
configuración de los routers y los shards.

|

|
10 de octubre de 2018

[ELM16 24.3.3]






Page 89














NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
MongoDB
Sharding: Esquema

|

|
10 de octubre de 2018







Page 90



















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
MongoDB
Sharding
El particionado de las colecciones se realiza a partir de una
shard
key
. La shard key debe ser un atributo ó conjunto de atributos
inmutable
de la colección, y se escoge en el momento de
construir el sharded cluster.
rangos los valores de la shard key
sh . shardCollection (
&#34; db_empresa . col_clientes &#34;
,
{
&#34; localidad &#34;
:
&#34; hashed &#34;
}, unique = False )

|

|
10 de octubre de 2018







Page 91





















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
MongoDB
Sharding
En un contexto de sharding es posible tener algunas colecciones
sharded (fragmentadas)
y otras
unsharded (no fragmentadas)
.
almacenarán en un shard particular del cluster, que será el
shard
primario
para esa base de datos.
siguientes restricciones:
1
ya existentes de la colección.
2
Si no lo tiene, MongoDB lo creará.
3
shard key, ni cambiar (update) su valor en ningún documento.
4
fue fragmentada (sharded) .

|

|
10 de octubre de 2018







Page 92


















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
MongoDB
Sharding: Objetivos
El sharding permite:
podrían caber en un único servidor.
El objetivo es que la base de datos sea
escalable
para proveer
soporte al procesamiento de Big Data.

|

|
10 de octubre de 2018







Page 93
















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
MongoDB
Replicación
MongoDB también brinda
tolerancia a fallas
a través de un
mecanismo de
replicación
de shards.

|

|
10 de octubre de 2018







Page 94




















NoSQL
|
Bases de datos NoSQL
|
Bases de datos orientadas a documentos
MongoDB
Replicación
El esquema de réplicas es de
master-slave with automated
failover (maestro-esclavo con recuperación automática)
:
réplicas de un shard se denomina
replica set
.
master.
replica sets.
el master. Los slaves sólo sirven de respaldo.
Los clientes pueden especificar una
read preference
para que las
lecturas sean enviadas a nodos secundarios de los shards.

|

|
10 de octubre de 2018







Page 95


















NoSQL
|
Bases de datos NoSQL
|
Bases de datos basadas en grafos
1
Introducción
2
Bases de datos distribuidas
3
Bases de datos NoSQL

Bases de datos wide column vs. por columnas
Bases de datos orientadas a documentos
Bases de datos basadas en grafos
4
El modelo MapReduce
5
Teorema CAP
6
Bibliografía

|

|
10 de octubre de 2018







Page 96






















NoSQL
|
Bases de datos NoSQL
|
Bases de datos basadas en grafos
Bases de datos basadas en grafos
En las
bases de datos basadas en grafos
los elementos
principales son nodos y arcos (ejes).
entre entidades distintas utilizando claves foráneas.
Ejemplo:
HijoDe(dni, dni_padre)
porque requiere de múltiples juntas.
nodo mantiene una referencia directa a sus nodos adyacentes.

|

|
10 de octubre de 2018







Page 97


















NoSQL
|
Bases de datos NoSQL
|
Bases de datos basadas en grafos
Bases de datos basadas en grafos
Aplicaciones
ventajas para resolver problemas clásicos de grafos como:
Calcular medidas de centralidad asociadas a los nodos.
mismo tipo de entidad.

|

|
10 de octubre de 2018







Page 98

















NoSQL
|
Bases de datos NoSQL
|
Bases de datos basadas en grafos
Neo4j
conocidas.
Está desarrollada en Java.
Es actualmente utilizada por empresas como Cisco, HP y Huawei.
distribuidas.
Posee APIs en distintos lenguajes: Python, Ruby, Java, ...
Utiliza un lenguaje de consulta declarativo denominado
Cypher
.

|

|
10 de octubre de 2018

[ELM16 24.6]






Page 99






















NoSQL
|
Bases de datos NoSQL
|
Bases de datos basadas en grafos
Neo4j
Neo4j para Linux y la API de Neo4j para Python.
3
1-Instalación del servidor de Neo4j
tar zxf neo4j-community-3.4.4-unix.tar.gz
2-Instalación de la API para Python
pip install neo4j-driver
3-Lanzamiento del servidor de Neo4j
./bin/neo4j start
3
Como alternativa se puede jugar con la consola online:
http://console.neo4j.org/

|

|
10 de octubre de 2018







Page 100






















NoSQL
|
Bases de datos NoSQL
|
Bases de datos basadas en grafos
Neo4j
Estructura: Nodos, labels y propiedades.
CREATE
Una base de datos Neo4j está formada por
nodos
.
Un nodo puede tener distintos
labels
. Dentro de cada label, el
nodo tendrá un conjunto de
propiedades
con determinados
valores
.
1
( tom
:
Persona
{
nombre
:
’Tomás ’
,
color
:
’Azul ’
,
prof
:
’ Estudiante ’
}
)
tener los nodos con determinado label.
1
( edith
:
Persona
{
nombre
:
’Tomás ’
,
color
:
’Verde ’
,
prof
:
’Músico ’
}
)
2
( maria
:
Persona
{
nombre
:
’María ’
,
prof
:
’ Estudiante ’
}
)
3
( gaby
:
Persona
{
nombre
:
’Gabriel ’
,
color
:
’Verde ’
,
prof
:
’Médico ’
}
)
En Cypher, los nodos se crean con el comando
CREATE
:
1
CREATE ( pepe
:
Persona
{
nombre
:
’Pepe ’
,
color
:
’Azul ’
}
)

|

|
10 de octubre de 2018
1

 
 
 
 
