#+title:Diseno Relacional II
#+date:



Page 1















Teoría del Diseño Relacional. Parte II: Algoritmos
75.15 / 75.28 / 95.05 - Base de Datos
Teoría del Diseño Relacional
Parte II: Algoritmos


26 de septiembre de 2018

|

|
26 de septiembre de 2018







Page 2















Teoría del Diseño Relacional. Parte II: Algoritmos
Topics
1
Objetivo
2
Inferencia de dependencias funcionales
3
Clausuras de conjuntos de df’s y atributos
4
Algoritmo de cubrimiento minimal
5
Algoritmo de descomposición a 3FN
6
Proyección de dependencias funcionales
7
Algoritmo de búsqueda de claves candidatas
8
Algoritmo de descomposición a FNBC
9
Algoritmo de verificación de junta sin pérdidas
10
Bibliografía

|

|
26 de septiembre de 2018







Page 3















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Objetivo
1
Objetivo
2
Inferencia de dependencias funcionales
3
Clausuras de conjuntos de df’s y atributos
4
Algoritmo de cubrimiento minimal
5
Algoritmo de descomposición a 3FN
6
Proyección de dependencias funcionales
7
Algoritmo de búsqueda de claves candidatas
8
Algoritmo de descomposición a FNBC
9
Algoritmo de verificación de junta sin pérdidas
10
Bibliografía

|

|
26 de septiembre de 2018







Page 4
















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Objetivo
Algoritmos de normalización
Supongamos que el
diseñador de la base de datos
definió un
conjunto de dependencias funcionales F a partir de la semántica.
información y las dependencias funcionales.
convertir un esquema de base de datos a 3FN y a FNBC.
relacionadas con los conjuntos de dependencias funcionales.

|

|
26 de septiembre de 2018







Page 5















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Inferencia de dependencias funcionales
1
Objetivo
2
Inferencia de dependencias funcionales
3
Clausuras de conjuntos de df’s y atributos
4
Algoritmo de cubrimiento minimal
5
Algoritmo de descomposición a 3FN
6
Proyección de dependencias funcionales
7
Algoritmo de búsqueda de claves candidatas
8
Algoritmo de descomposición a FNBC
9
Algoritmo de verificación de junta sin pérdidas
10
Bibliografía

|

|
26 de septiembre de 2018







Page 6




















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Inferencia de dependencias funcionales
Inferencia de dependencias funcionales
Axiomas de Armstrong
dependencias funcionales a partir de otras:
Axioma de reflexividad:
Y ⊂ X ⇒ X → Y
Axioma de aumento:
∀W : X → Y ⇒ XW → YW
Axioma de transitividad:
X → Y ∧ Y → Z ⇒ X → Z
dependencia funcional (i.e., no son axiomas in strictus sensus!).
Los tres axiomas en conjunto son
completos
: Toda dependencia
los axiomas de Armstrong.
funcionales F.

|

|
26 de septiembre de 2018

[ELM16 15.1.1]






Page 7


















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Inferencia de dependencias funcionales
Inferencia de dependencias funcionales
Axiomas de Armstrong
Exceso de notación
o A
1
,
A
2
, ...
y escribamos un conjunto de atributos (por ejemplo,
las comas. En dicho ejemplo, lo denotaremos directamente BCD.
Ejercicio
F = {A → C, BC → E , D → B} es posible inferir que AD → E .

|

|
26 de septiembre de 2018







Page 8


















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Inferencia de dependencias funcionales
Inferencia de dependencias funcionales
Reglas de inferencia adicionales
Armstrong:
Regla de unión:
X → Y ∧ X → Z ⇒ X → YZ
Regla de pseudotransitividad:
∀W : X → Y ∧ YW → Z ⇒ XW → Z
Regla de descomposición:
X → YZ ⇒ X → Y ∧ X → Z

|

|
26 de septiembre de 2018







Page 9















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Clausuras de conjuntos de df’s y atributos
1
Objetivo
2
Inferencia de dependencias funcionales
3
Clausuras de conjuntos de df’s y atributos
4
Algoritmo de cubrimiento minimal
5
Algoritmo de descomposición a 3FN
6
Proyección de dependencias funcionales
7
Algoritmo de búsqueda de claves candidatas
8
Algoritmo de descomposición a FNBC
9
Algoritmo de verificación de junta sin pérdidas
10
Bibliografía

|

|
26 de septiembre de 2018







Page 10


















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Clausuras de conjuntos de df’s y atributos
de atributos
Partimos de una relación R(A
1
,
A
2
, ...,
A
n
)
.
Dado un conjunto de dependencias funcionales F , la
clausura de
F
(F
+
) es el conjunto de todas las dependencias funcionales que
pueden inferirse de F . Esto es:
F
+
= {(
X → Y )|F |= (X → Y )}.
F , la
clausura de X con respecto a F
(X
+
F
) es el conjunto de todos
los atributos A
i
tales que la dependencia funcional X → A
i
se
infiere del conjunto de dependencias F . Esto es:
X
+
F
= {
A
i
|F |= (X → A
i
)}

|

|
26 de septiembre de 2018







Page 11


















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Clausuras de conjuntos de df’s y atributos
y de atributos
Definiciones
Las clausuras de conjuntos de atributos, X
+
F
, son una forma
ordenada de construir F
+
.
Dado un esquema de relación R(A
1
,
A
2
, ...,
A
n
)
y un conjunto de
sólo si CK
+
F
=
A
1
A
2
...
A
n
y ningún subconjunto propio cumple con
esa propiedad.

|

|
26 de septiembre de 2018







Page 12



















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Clausuras de conjuntos de df’s y atributos
Clausuras de conjuntos de df’s y de atributos
Algoritmo 1: Clausura de un conjunto de atributos X con respecto a F
Algoritmo 1: Clausura de un conjunto de atributos X con respecto a F
Input : Un conjunto de dependencias funcionales F de una relación
universal R, un conjunto de atributos X .
Output: La clausura de X con respecto a F , X
+
F
.
begin
1
X
+
F
← X ;
2
repeat
3
oldX
+
← X
+
F
;
4
foreach
5
if Y ⊂ X
+
F
then
6
X
+
F
← X
+
F
∪ Z ;
7
end
8
end
9
until oldX
+
=
X
+
F
;
10
end
11

|

|
26 de septiembre de 2018

[ELM16 16.1.1]






Page 13















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de cubrimiento minimal
1
Objetivo
2
Inferencia de dependencias funcionales
3
Clausuras de conjuntos de df’s y atributos
4
Algoritmo de cubrimiento minimal
5
Algoritmo de descomposición a 3FN
6
Proyección de dependencias funcionales
7
Algoritmo de búsqueda de claves candidatas
8
Algoritmo de descomposición a FNBC
9
Algoritmo de verificación de junta sin pérdidas
10
Bibliografía

|

|
26 de septiembre de 2018







Page 14






















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de cubrimiento minimal
Cobertura y equivalencia
Definiciones
decimos que el conjunto F
cubre
a G cuando toda dependencia
funcional X → Y ∈ G puede ser inferida a partir de F . Es decir:
∀(X → Y ) ∈ G : F |= X → Y .
Dos conjuntos de dependencias funcionales F y G son
equivalentes
cuando cada uno de ellos es cubierto por el otro. En
coinciden: F
+
=
G
+
. Lo simbolizaremos F ≡ G.
Ejercicio
F
1
= {
A → B, B → C, C → A} y F
2
= {
A → C, C → B, B → A} son
equivalentes.

|

|
26 de septiembre de 2018







Page 15


















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de cubrimiento minimal
Cubrimiento minimal de un conjunto de dependencias
Definición
minimalidad. En particular, nos interesa que:
No haya atributos innecesarios del lado izquierdo:
∀(X → Y ) ∈ G :6 ∃(Z → Y ) ∈ G, Z ⊂ X , Z 6= X .
No haya dependencias redundantes:
6 ∃(X → Y ) ∈ G : G − {X → Y } ≡ G.
equivalente a F y cumple estas dos propiedades lo denominamos
cubrimiento minimal de F
.

|

|
26 de septiembre de 2018







Page 16




















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de cubrimiento minimal
Cubrimiento minimal de un conjunto de dependencias
Algoritmo
El algoritmo de cubrimiento minimal tiene 3 grandes pasos:
1
(descomponer cada dependencia funcional X → Y en df’s X → A
i
con A
i
∈ Y .
2
dependencia funcional X → A
i
.
3
Eliminar las dependencias funcionales redundantes.

|

|
26 de septiembre de 2018

[ELM16 15.1.3]






Page 17




















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de cubrimiento minimal
Algoritmo 2: Cubrimiento minimal de un conjunto de df’s F
Input
: Un conjunto de dependencias funcionales F .
Output : Un cubrimiento minimal de F , F
min
.
begin
1
F
min
← F ;
2
foreach (X → Y ) ∈ F
min
do
3
F
min
=
F
min
− {X → Y };
4
foreach A
i
do
5
F
min
=
F
min
∪ {X → A
i
};
#Pasamos a forma canónica
6
end
7
end
8
foreach (X → A) ∈ F
min
do
9
foreach
10
if {F
min
− {X → A}} ∪ {(X − {B}) → A} ≡ F
min
then
11
F
min
= {
F
min
− {X → A}} ∪ {(X − {B}) → A};
#Eliminamos
12
atributos innecesarios del lado izquierdo
end
13
end
14
end
15
foreach (X → A) ∈ F
min
do
16
if F
min
− {X → A} ≡ F
min
then
17
F
min
=
F
min
− {X → A};
#Eliminamos las df’s redundantes
18
end
19
end
20
end
21

|

|
26 de septiembre de 2018







Page 18



















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de cubrimiento minimal
Cubrimiento minimal de un conjunto de dependencias
Ejemplo
Ejemplo
encuentre un cubrimiento minimal.
Soluciones posibles
1-
F
1
min
= {
AB → C, C → A, BC → D, CD → B, D → E , D → G, BE →
C, CG → D, CE → G}
2-
F
2
min
= {
AB → C, C → A, BC → D, D → E , D → G, BE → C, CG →
B, CE → G}

|

|
26 de septiembre de 2018







Page 19















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de descomposición a 3FN
1
Objetivo
2
Inferencia de dependencias funcionales
3
Clausuras de conjuntos de df’s y atributos
4
Algoritmo de cubrimiento minimal
5
Algoritmo de descomposición a 3FN
6
Proyección de dependencias funcionales
7
Algoritmo de búsqueda de claves candidatas
8
Algoritmo de descomposición a FNBC
9
Algoritmo de verificación de junta sin pérdidas
10
Bibliografía

|

|
26 de septiembre de 2018







Page 20





















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de descomposición a 3FN
Descomposición a 3FN
Algoritmo 3: Descomposición a 3FN (Elmasri, Navathe, 2016)
Input
: Una relación universal R y un conjunto de dependencias funcionales F .
Output : Una descomposición de R, D = (R
1
,
R
2
, ...,
R
n
)
que preserva la
información y las dependencias funcionales, y está en 3FN.
begin
1
D = ∅;
2
Encontrar un
cubrimiento minimal
F
min
para F ;
3
foreach (X |(∃A)((X → A) ∈ F
min
))
do
4
Crear un esquema de relación R
X
(
X , A
1
,
A
2
, ...,
A
k
)
en donde X → A
i
son las
5
únicas df’s en F
min
con el conjunto X en el lado izquierdo;
D = D ∪ R
X
;
6
end
7
Hallar todas las
claves candidatas
de R;
8
if
9
Tomar una de las claves candidatas CK de R;
10
D = D ∪ R
CK
(
CK );
11
end
12
do
13
if los atributos de una relación R
i
∈ D están incluidos en los de otra relación
14
R
j
(R
i
es redundante)
then
D = D − R
i
;
15
end
16
while haya
relaciones redundantes
en D ;
17
end
18

|

|
26 de septiembre de 2018

[ELM16 15.3.1]






Page 21















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Proyección de dependencias funcionales
1
Objetivo
2
Inferencia de dependencias funcionales
3
Clausuras de conjuntos de df’s y atributos
4
Algoritmo de cubrimiento minimal
5
Algoritmo de descomposición a 3FN
6
Proyección de dependencias funcionales
7
Algoritmo de búsqueda de claves candidatas
8
Algoritmo de descomposición a FNBC
9
Algoritmo de verificación de junta sin pérdidas
10
Bibliografía

|

|
26 de septiembre de 2018







Page 22



















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Proyección de dependencias funcionales
Proyección de dependencias funcionales
funcionales F en D = (R
1
(
Z
1
),
R
2
(
Z
2
), ...,
R
n
(
Z
n
))
, es necesario
proyección de F sobre los atributos Z
i
de cada una de las R
i
(
Z
i
)
.
La
proyección de un conjunto de dependencias funcionales F
sobre un conjunto de atributos Z
, F
Z
, se define como:
F
Z
= {
X → Y ∈ F
+
|X ∪ Y ⊂ Z }
son entonces:
F
+
D
= (
F
+
Z
1
∪ F
+
Z
2
∪ ... ∪ F
+
Z
n
)
+

|

|
26 de septiembre de 2018







Page 23















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de búsqueda de claves candidatas
1
Objetivo
2
Inferencia de dependencias funcionales
3
Clausuras de conjuntos de df’s y atributos
4
Algoritmo de cubrimiento minimal
5
Algoritmo de descomposición a 3FN
6
Proyección de dependencias funcionales
7
Algoritmo de búsqueda de claves candidatas
8
Algoritmo de descomposición a FNBC
9
Algoritmo de verificación de junta sin pérdidas
10
Bibliografía

|

|
26 de septiembre de 2018







Page 24
























Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de búsqueda de claves candidatas
Algoritmo de búsqueda de claves candidatas
Daremos una descripción de muy alto nivel de un algoritmo
1
para
R(A
1
,
A
2
, ...,
A
n
)
, a partir de un conjunto de dependencias
funcionales F .
1
funcionales F . Inicializar el
conjunto de atributos de cálculo
C
a
= {
A
1
,
A
2
, ...,
A
n
}.
2
Hallar los
atributos independientes del cálculo
, A
indep
, que son
C
a
=
C
a
− A
indep
.
3
Hallar los
conjuntos de términos equivalentes
, A
equiv
, que son
equivalentes dejar sólo uno, y eliminar los restantes de C
a
. Calcular
la proyección de F
min
en C
a
, F
C
.
1
Extraído del libro “Tecnología y diseño de bases de datos” de Piattini et al.

|

|
26 de septiembre de 2018

[PIAT06 12.2.4]






Page 25

















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de búsqueda de claves candidatas
Algoritmo de búsqueda de claves candidatas
4
sólo implicantes en F
C
(es decir, estén sólo en la parte izquierda).
Si K
+
=
C
a
entonces K es clave.
5
cada uno de ellos si verifica si K es clave de C
a
calculando la
aquellos que resultaron ser clave de C
a
, ya que no van a ser
minimales.
6
Por cada K encontrado como clave de C
a
se unen los atributos
independientes, A
indep
, y se agrega K al resultado, CKs.
7
encontrados en el paso 3, y se agregan todas al resultado, CKs.

|

|
26 de septiembre de 2018







Page 26




















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de búsqueda de claves candidatas
Algoritmo de búsqueda de claves candidatas
Ejemplo I
Ejemplo I
calcule todas las claves candidatas existentes.
Solución
1-
F
min
= {
AB → C, A → D, A → E , B → F , F → H, D → I, D → J, B →
A, H → G}
2-
A
indep
= ∅
3-
A
equiv
= ∅
4-
CK = {B}
Observamos que B
+
= {
A, B, C, D, E , F , G, H, I, J}
No hay otras claves candidatas.

|

|
26 de septiembre de 2018







Page 27



















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de búsqueda de claves candidatas
Algoritmo de búsqueda de claves candidatas
Ejemplo II
Ejemplo II
las claves candidatas existentes.
Solución
1-
F
min
= {
AB → F , D → A, E → D, D → E , CF → B, B → C}
2-
A
indep
= {
G}; C
a
= {
A, B, C, D, E , F }
3-
A
equiv
= {
E , D}
eliminamos D → C
a
= {
A, B, C, E , F }
→ F
C
= {
AB → F , E → A, CF → B, B → C}
4-
K = {E }, pero E
+
= {
A, E } → E no es clave.

|

|
26 de septiembre de 2018







Page 28



















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de búsqueda de claves candidatas
Algoritmo de búsqueda de claves candidatas
Ejemplo II
Ejemplo II
las claves candidatas existentes.
Solución
5-
Agregamos a K otros atributos implicantes, primero de a uno:
(
EA)
+
= {
A, E } 6= C
a
→ no es clave
(
EB)
+
= {
A, B, C, E , F } = C
a
→ es clave
(
EC)
+
= {
A, C, E } 6= C
a
→ no es clave
(
EF )
+
= {
A, E , F } 6= C
a
→ no es clave

|

|
26 de septiembre de 2018







Page 29




















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de búsqueda de claves candidatas
Algoritmo de búsqueda de claves candidatas
Ejemplo II
Ejemplo II
las claves candidatas existentes.
Solución
5-
Agregamos de a dos, evitando partir de EB:
(
EAC)
+
= {
A, C, E } 6= C
a
→ no es clave
(
EAF )
+
= {
A, E , F } 6= C
a
→ no es clave
(
ECF )
+
= {
A, B, C, E , F } = C
a
→ es clave
→ Hemos encontrado {E, B} y {E, C, F }

|

|
26 de septiembre de 2018







Page 30




















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de búsqueda de claves candidatas
Algoritmo de búsqueda de claves candidatas
Ejemplo II
Ejemplo II
las claves candidatas existentes.
Solución
6-
Agregamos los atributos independientes, A
indep
:
→ {E, B, G} y {E, C, F , G}
7-
Agregamos las del término equivalente D:
CKs = {{E,B,G}, {E,C,F,G}, {D,B,G}, {D,C,F,G}}

|

|
26 de septiembre de 2018







Page 31

















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de búsqueda de claves candidatas
Algoritmo de búsqueda de claves candidatas
Ejercicio
Ejercicio
claves candidatas existentes.
Solución
Hay una única clave candidata CK = {ABD}.

|

|
26 de septiembre de 2018







Page 32















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de descomposición a FNBC
1
Objetivo
2
Inferencia de dependencias funcionales
3
Clausuras de conjuntos de df’s y atributos
4
Algoritmo de cubrimiento minimal
5
Algoritmo de descomposición a 3FN
6
Proyección de dependencias funcionales
7
Algoritmo de búsqueda de claves candidatas
8
Algoritmo de descomposición a FNBC
9
Algoritmo de verificación de junta sin pérdidas
10
Bibliografía

|

|
26 de septiembre de 2018







Page 33























Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de descomposición a FNBC
Descomposición a FNBC
Algoritmo 4: Descomposición a FNBC (García-Molina, 2009)
Input
: Una relación universal R y un conjunto de dependencias funcionales F .
Output : Una descomposición de R, D = (R
1
,
R
2
, ...,
R
n
)
que preserva la
información y está en FNBC.
begin
1
D = {R};
2
while (∃R
i
(
Z ) ∈ D tal que R
i
(
Z ) no está en FNBC)
do
3
Encontrar una dependencia funcional X → Y contenida en R
i
que viole la
4
Calcular X
+
;
5
D = D − {R
i
(
Z )};
#Eliminamos la relación que viola la FNBC
6
D = D ∪ {R
i1
(
X
+
)}
;
#Agregamos una relación para representar
7
la dependencia funcional y otros atributos implicados por
X
D = D ∪ {R
i2
(
Z − (X
+
− X )};
#Agregamos una relación sin los
8
atributos implicados por X
end
9
end
10

|

|
26 de septiembre de 2018

[ELM16 15.3.2; GM09 3.3.4]






Page 34















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de verificación de junta sin pérdidas
1
Objetivo
2
Inferencia de dependencias funcionales
3
Clausuras de conjuntos de df’s y atributos
4
Algoritmo de cubrimiento minimal
5
Algoritmo de descomposición a 3FN
6
Proyección de dependencias funcionales
7
Algoritmo de búsqueda de claves candidatas
8
Algoritmo de descomposición a FNBC
9
Algoritmo de verificación de junta sin pérdidas
10
Bibliografía

|

|
26 de septiembre de 2018







Page 35



















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de verificación de junta sin pérdidas
Algoritmo Chase
que preservan la información.
una descomposición de R en D = (R
1
(
Z
1
),
R
2
(
Z
2
), ...,
R
n
(
Z
n
))
,
toda instancia r de R puede recuperarse como:
r = π
Z
1
(
r ) ∗ π
Z
2
(
r ) ∗ ... ∗ π
Z
n
(
r )
El
algoritmo de Chase
nos permite verificar la preservación de
se obtuvo.
simultáneo con A. Aho, C. Beeri y J. Ullman.

|

|
26 de septiembre de 2018

[ELM16 15.2.3; GM09 3.4]






Page 36






















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de verificación de junta sin pérdidas
Algoritmo Chase
Principio de funcionamiento
con el conjunto de df’s F = {A → C, B → D, AB → CD}:
R
1
(
AC)
R
2
(
BD)
R
3
(
AB)
El algoritmo chase utiliza una tabla denominada
tableau
, con
tantas filas como relaciones y tantas columnas como atributos:
A
B
C
D
R
1
R
2
R
3

|

|
26 de septiembre de 2018







Page 37





















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de verificación de junta sin pérdidas
Algoritmo Chase
Principio de funcionamiento
R(ABCD), F = {A → C, B → D, AB → CD}:
R
1
(
AC)
R
2
(
BD)
R
3
(
AB)
El algoritmo parte de una hipotética tupla (a
1
,
a
2
,
a
3
,
a
4
)
de R que
una relación R
i
contiene un atributo A
j
, entonces en la posición
(
i, j) de la tabla escribimos el valor abstracto a
j
.
A
B
C
D
R
1
a
1
a
3
R
2
a
2
a
4
R
3
a
1
a
2

|

|
26 de septiembre de 2018







Page 38




















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de verificación de junta sin pérdidas
Algoritmo Chase
Principio de funcionamiento
R(ABCD), F = {A → C, B → D, AB → CD}:
R
1
(
AC)
R
2
(
BD)
R
3
(
AB)
Ahora rellenamos las demás posiciones con valores b
ij
.
A
B
C
D
R
1
a
1
b
12
a
3
b
14
R
2
b
21
a
2
b
23
a
4
R
3
a
1
a
2
b
33
b
34

|

|
26 de septiembre de 2018







Page 39





















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de verificación de junta sin pérdidas
Algoritmo Chase
Principio de funcionamiento
R(ABCD), F = {A → C, B → D, AB → CD}:
R
1
(
AC)
R
2
(
BD)
R
3
(
AB)
Como en la tercera fila también tenemos A, reemplazamos b
33
por a
3
para no violar la dependencia funcional.
A
B
C
D
R
1
a
1
b
12
a
3
b
14
R
2
b
21
a
2
b
23
a
4
R
3
a
1
a
2
a
3
b
34

|

|
26 de septiembre de 2018







Page 40





















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de verificación de junta sin pérdidas
Algoritmo Chase
Principio de funcionamiento
R(ABCD), F = {A → C, B → D, AB → CD}:
R
1
(
AC)
R
2
(
BD)
R
3
(
AB)
fila. En la tercera, reemplazamos b
34
por a
4
para no violar la
dependencia funcional.
A
B
C
D
R
1
a
1
b
12
a
3
b
14
R
2
b
21
a
2
b
23
a
4
R
3
a
1
a
2
a
3
a
4

|

|
26 de septiembre de 2018







Page 41





















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de verificación de junta sin pérdidas
Algoritmo Chase
Principio de funcionamiento
R(ABCD), F = {A → C, B → D, AB → CD}:
R
1
(
AC)
R
2
(
BD)
R
3
(
AB)
Observamos que AB → CD sólo se encuentra en la tercera fila.
A
B
C
D
R
1
a
1
b
12
a
3
b
14
R
2
b
21
a
2
b
23
a
4
R
3
a
1
a
2
a
3
a
4
nos indica que podemos reconstruir R sin pérdida de información.

|

|
26 de septiembre de 2018







Page 42





















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de verificación de junta sin pérdidas
Algoritmo Chase
Principio de funcionamiento
A
B
C
D
R
1
a
1
b
12
a
3
b
14
R
2
b
21
a
2
b
23
a
4
R
3
a
1
a
2
a
3
a
4
Observaciones:
se construye a partir de instancias de las relaciones R
i
.
Si no hubieramos incluído R
3
en la descomposición, aún
preservado la información.

|

|
26 de septiembre de 2018







Page 43





















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de verificación de junta sin pérdidas
Algoritmo Chase
Principio de funcionamiento
es descompuesta en:
R
1
(
AB)
R
2
(
BCD)
R
3
(
DE )
El tableau inicial tendrá el siguiente aspecto:
A
B
C
D
E
R
1
a
1
a
2
b
13
b
14
b
15
R
2
b
21
a
2
a
3
a
4
b
25
R
3
b
31
b
32
b
33
a
4
a
5

|

|
26 de septiembre de 2018







Page 44





















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de verificación de junta sin pérdidas
Algoritmo Chase
Principio de funcionamiento
R(ABCDE ), F = {B → C, C → D, D → A, B → E }:
R
1
(
AB)
R
2
(
BCD)
R
3
(
DE )
Procesando la dependencia B → C observamos que:
En una de ellas C no aparece. Remplazamos allí el b
13
por a
3
.
A
B
C
D
E
R
1
a
1
a
2
a
3
b
14
b
15
R
2
b
21
a
2
a
3
a
4
b
25
R
3
b
31
b
32
b
33
a
4
a
5

|

|
26 de septiembre de 2018







Page 45





















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de verificación de junta sin pérdidas
Algoritmo Chase
Principio de funcionamiento
R(ABCDE ), F = {B → C, C → D, D → A, B → E }:
R
1
(
AB)
R
2
(
BCD)
R
3
(
DE )
Luego, al procesar C → D tenemos que:
En una de ellas D no aparece. Remplazamos allí el b
14
por a
4
.
A
B
C
D
E
R
1
a
1
a
2
a
3
a
4
b
15
R
2
b
21
a
2
a
3
a
4
b
25
R
3
b
31
b
32
b
33
a
4
a
5

|

|
26 de septiembre de 2018







Page 46




















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de verificación de junta sin pérdidas
Algoritmo Chase
Principio de funcionamiento
R(ABCDE ), F = {B → C, C → D, D → A, B → E }:
R
1
(
AB)
R
2
(
BCD)
R
3
(
DE )
Ahora procesamos D → A:
A
B
C
D
E
R
1
a
1
a
2
a
3
a
4
b
15
R
2
a
1
a
2
a
3
a
4
b
25
R
3
a
1
b
32
b
33
a
4
a
5

|

|
26 de septiembre de 2018







Page 47




















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de verificación de junta sin pérdidas
Algoritmo Chase
Principio de funcionamiento
R(ABCDE ), F = {B → C, C → D, D → A, B → E }:
R
1
(
AB)
R
2
(
BCD)
R
3
(
DE )
Y por último, B → E :
A
B
C
D
E
R
1
a
1
a
2
a
3
a
4
b
15
R
2
a
1
a
2
a
3
a
4
b
15
R
3
a
1
b
32
b
33
a
4
a
5

|

|
26 de septiembre de 2018







Page 48




















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de verificación de junta sin pérdidas
Algoritmo Chase
Principio de funcionamiento
R(ABCDE ), F = {B → C, C → D, D → A, B → E }:
R
1
(
AB)
R
2
(
BCD)
R
3
(
DE )
A
B
C
D
E
R
1
a
1
a
2
a
3
a
4
b
15
R
2
a
1
a
2
a
3
a
4
b
15
R
3
a
1
b
32
b
33
a
4
a
5
Observamos que ninguna fila nos quedó llena de elementos a
i
.
La descomposición por lo tanto no preserva la información.

|

|
26 de septiembre de 2018







Page 49




















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de verificación de junta sin pérdidas
Algoritmo Chase
Principio de funcionamiento
A
B
C
D
E
R
1
a
1
a
2
a
3
a
4
b
15
R
2
a
1
a
2
a
3
a
4
b
15
R
3
a
1
b
32
b
33
a
4
a
5
R
1
(
Z
1
),
R
2
(
Z
2
), ...,
R
n
(
Z
n
)
pierde información.
tableau:
π
Z
1
(
r ) ∗ π
Z
2
(
r ) ∗ ... ∗ π
Z
n
(
r ) 6= r

|

|
26 de septiembre de 2018







Page 50


















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de verificación de junta sin pérdidas
Algoritmo Chase
Ejercicio
Ejercicio
F = {A → C, B → C, C → D, DE → C, CE → A}, descompuesta en:
R
1
(
AD)
R
2
(
AB)
R
3
(
BE )
R
4
(
CDE )
R
5
(
AE )
Determine si la misma es con o sin pérdidas.

|

|
26 de septiembre de 2018







Page 51


















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de verificación de junta sin pérdidas
Algoritmo Chase
Ejercicio
El tableau inicial tendrá el siguiente aspecto:
A
B
C
D
E
R
1
a
1
b
12
b
13
a
4
b
15
R
2
a
1
a
2
b
23
b
24
b
25
R
3
b
31
a
2
b
33
b
34
a
5
R
4
b
41
b
42
a
3
a
4
a
5
R
5
a
1
b
52
b
53
b
54
a
5

|

|
26 de septiembre de 2018







Page 52


















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de verificación de junta sin pérdidas
Algoritmo Chase
Ejercicio
Después de aplicar A → C:
A
B
C
D
E
R
1
a
1
b
12
b
13
a
4
b
15
R
2
a
1
a
2
b
13
b
24
b
25
R
3
b
31
a
2
b
33
b
34
a
5
R
4
b
41
b
42
a
3
a
4
a
5
R
5
a
1
b
52
b
13
b
54
a
5

|

|
26 de septiembre de 2018







Page 53


















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de verificación de junta sin pérdidas
Algoritmo Chase
Ejercicio
Después de aplicar B → C:
A
B
C
D
E
R
1
a
1
b
12
b
13
a
4
b
15
R
2
a
1
a
2
b
13
b
24
b
25
R
3
b
31
a
2
b
13
b
34
a
5
R
4
b
41
b
42
a
3
a
4
a
5
R
5
a
1
b
52
b
13
b
54
a
5

|

|
26 de septiembre de 2018







Page 54


















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de verificación de junta sin pérdidas
Algoritmo Chase
Ejercicio
Después de aplicar C → D:
A
B
C
D
E
R
1
a
1
b
12
b
13
a
4
b
15
R
2
a
1
a
2
b
13
a
4
b
25
R
3
b
31
a
2
b
13
a
4
a
5
R
4
b
41
b
42
a
3
a
4
a
5
R
5
a
1
b
52
b
13
a
4
a
5

|

|
26 de septiembre de 2018







Page 55


















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de verificación de junta sin pérdidas
Algoritmo Chase
Ejercicio
Después de aplicar DE → C:
A
B
C
D
E
R
1
a
1
b
12
b
13
a
4
b
15
R
2
a
1
a
2
b
13
a
4
b
25
R
3
b
31
a
2
a
3
a
4
a
5
R
4
b
41
b
42
a
3
a
4
a
5
R
5
a
1
b
52
a
3
a
4
a
5

|

|
26 de septiembre de 2018







Page 56


















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Algoritmo de verificación de junta sin pérdidas
Algoritmo Chase
Ejercicio
Por último, aplicando CE → A:
A
B
C
D
E
R
1
a
1
b
12
b
13
a
4
b
15
R
2
a
1
a
2
b
13
a
4
b
25
R
3
a
1
a
2
a
3
a
4
a
5
R
4
a
1
b
42
a
3
a
4
a
5
R
5
a
1
b
52
a
3
a
4
a
5
La descomposición es sin pérdidas.

|

|
26 de septiembre de 2018







Page 57















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Bibliografía
1
Objetivo
2
Inferencia de dependencias funcionales
3
Clausuras de conjuntos de df’s y atributos
4
Algoritmo de cubrimiento minimal
5
Algoritmo de descomposición a 3FN
6
Proyección de dependencias funcionales
7
Algoritmo de búsqueda de claves candidatas
8
Algoritmo de descomposición a FNBC
9
Algoritmo de verificación de junta sin pérdidas
10
Bibliografía

|

|
26 de septiembre de 2018







Page 58
















Teoría del Diseño Relacional. Parte II: Algoritmos
|
Bibliografía
Bibliografía
[ELM16] Fundamentals of Database Systems, 7th Edition.
R. Elmasri, S. Navathe, 2016.
Capítulo 15 (Algoritmo de descomposición a 3FN)
[PIAT06] Tecnología y diseño de bases de datos.
M. Piattini, E. Marcos, C. Calero, B. Vela, 2006.
Capítulo 12 (Algoritmo de extracción de claves candidatas)
[GM09] Database Systems, The Complete Book, 2nd Edition.
H. García-Molina, J. Ullman, J. Widom, 2009.
Capítulo 3 (Algoritmo de descomposición a FNBC)

|

|
26 de septiembre de 2018

 
 
 
 
